import telebot
import logging
from datetime import datetime
import telebot
from telebot import types
from telebot import types
from math import floor
from datetime import datetime, timedelta
import time
import random
import re
import config
import threading
import crypto_pay
import requests
import sqlite3
import db as db_module

bot = telebot.TeleBot(config.BOT_TOKEN)

treasury_lock = threading.Lock()
active_treasury_admins = {}

user_activity = {}

with sqlite3.connect('database.db') as conn:
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        ID INTEGER PRIMARY KEY,
        BALANCE REAL DEFAULT 0,
        REG_DATE TEXT
    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS numbers (
        NUMBER TEXT PRIMARY KEY,
        ID_OWNER INTEGER,
        TAKE_DATE TEXT,
        SHUTDOWN_DATE TEXT,
        MODERATOR_ID INTEGER,
        CONFIRMED_BY_MODERATOR_ID INTEGER,
        VERIFICATION_CODE TEXT,
        STATUS TEXT,
        TG_NUMBER INTEGER DEFAULT 1,
        GROUP_CHAT_ID INTEGER
    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS personal (
        ID INTEGER PRIMARY KEY,
        TYPE TEXT
    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS withdraws (
        ID INTEGER,
        AMOUNT REAL,
        DATE TEXT,
        STATUS TEXT
    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS settings (
        PRICE REAL  -- –¶–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä
    )''')
    
    cursor.execute("PRAGMA table_info(settings)")
    columns = [col[1] for col in cursor.fetchall()]
    if 'HOLD_TIME' not in columns:
        cursor.execute('ALTER TABLE settings ADD COLUMN HOLD_TIME INTEGER')
    
    cursor.execute('SELECT COUNT(*) FROM settings')
    count = cursor.fetchone()[0]
    
    if count == 0:
        cursor.execute('INSERT INTO settings (PRICE, HOLD_TIME) VALUES (?, ?)', (2.0, 5))
    else:
        cursor.execute('UPDATE settings SET HOLD_TIME = ? WHERE HOLD_TIME IS NULL', (5,))
    
    conn.commit()


class Database:
    def get_db(self):
        return sqlite3.connect('database.db')

    def is_moderator(self, user_id):
        with self.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM personal WHERE ID = ? AND TYPE = ?', (user_id, 'moder'))
            return cursor.fetchone() is not None

    def update_balance(self, user_id, amount):
        with self.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (amount, user_id))
            conn.commit()

    def get_group_name(self, group_id):
        return db_module.get_group_name(group_id)



db = Database()


def is_russian_number(phone_number):
    cleaned_number = re.sub(r'[^0-9+]', '', phone_number.strip())
    if cleaned_number.startswith('+8') or cleaned_number.startswith('8'):
        cleaned_number = '+7' + cleaned_number[2:] if cleaned_number.startswith('+8') else '+7' + cleaned_number[1:]
    elif cleaned_number.startswith('7'):
        cleaned_number = '+7' + cleaned_number[1:]
    elif not cleaned_number.startswith('+'):
        cleaned_number = '+7' + cleaned_number
    pattern = r'^\+7\d{10}$'
    if bool(re.match(pattern, cleaned_number)):
        return cleaned_number
    return None



def check_balance_and_fix(user_id):
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if user and user[0] < 0:
            cursor.execute('UPDATE users SET BALANCE = 0 WHERE ID = ?', (user_id,))
            conn.commit()

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    update_user_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ê–§–ö

    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    chat_type = bot.get_chat(message.chat.id).type
    is_group = chat_type in ["group", "supergroup"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM users WHERE ID = ?', (user_id,))
        if not cursor.fetchone():
            cursor.execute('INSERT INTO users (ID, BALANCE, REG_DATE, IS_AFK) VALUES (?, ?, ?, ?)',
                          (user_id, 0, current_date, 0))
            print(f"[+] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ users:")
            print(f"üÜî ID: {user_id}")
            print(f"üë§ –ò–º—è: {message.from_user.first_name} {message.from_user.last_name or ''}")
            print(f"üîó Username: @{message.from_user.username or '–Ω–µ—Ç'}")
            print(f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {current_date}")
            print("-" * 40)
        conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BLOCKED FROM requests WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if user and user[0] == 1:
            bot.send_message(message.chat.id, "üö´ –í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –±–æ—Ç–µ!")
            return
    
    if user_id in config.ADMINS_ID:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT OR REPLACE INTO requests (ID, LAST_REQUEST, STATUS, BLOCKED, CAN_SUBMIT_NUMBERS) VALUES (?, ?, ?, ?, ?)',
                          (user_id, current_date, 'approved', 0, 1))
            conn.commit()
        if is_group:
            is_moderator = db_module.is_moderator(user_id)
            markup = types.InlineKeyboardMarkup()
            if is_moderator:
                markup.add(
                    types.InlineKeyboardButton("", callback_data=""),
                )
                bot.send_message(
                    message.chat.id,
                    "-",
                    reply_markup=markup
                )
            else:
                markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
                is_afk = db_module.get_afk_status(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ê–§–ö
                afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not is_afk else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
                markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
                bot.send_message(
                    message.chat.id,
                    f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
                    f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
                    "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
                    "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
                    f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
                    "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
                    f"‚ñ™Ô∏è <code>2.0$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ 5 –º–∏–Ω—É—Ç)\n"
                    f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME} ?</b>\n"
                    "‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
                    "‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
                    "‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
                    "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
        else:
            show_main_menu(message)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ show_main_menu
        return
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT LAST_REQUEST, STATUS FROM requests WHERE ID = ?', (user_id,))
        request = cursor.fetchone()
        if request and request[1] == 'approved':
            if is_group:
                is_moderator = db_module.is_moderator(user_id)
                markup = types.InlineKeyboardMarkup()
                if is_moderator:
                    bot.send_message(
                        message.chat.id,
                        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù\n" \
          "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ: (–≥—Ä—É–ø–ø–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω)\n\n" \
          "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n\n" \
          "1. –ë—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏\n\n" \
          "2. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –µ—Å–ª–∏ —Å –Ω–∏–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫\n" \
          "–ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —ç—Ç–∏–º –≤ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö!\n\n" \
          "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:\n" \
          "1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä\n" \
          "–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–≤–æ–¥–æ–º —Ç–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ ¬´—Ç–≥1¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –µ–≥–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç\n" \
          "–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ø–∏—Å–∞–Ω –≤–∞—à–µ–º—É –ü–ö\n" \
          "–í–∞–∂–Ω–æ! –ú—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –ü–ö, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ 70\n\n" \
          "2. –ï—Å–ª–∏ —Å –Ω–æ–º–µ—Ä–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç (—ç—Ç–æ –≤—Ä–µ–º—è, –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞) –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ ¬´—Å–ª–µ—Ç–µ–≤—à–∏–º¬ª\n" \
          "–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É: ¬´—Å–ª–µ—Ç –∏ –Ω–æ–º–µ—Ä —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏¬ª\n" \
          "–ü—Ä–∏–º–µ—Ä: —Å–ª–µ—Ç +79991112345\n" \
          "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä –æ—Ç–º–µ—Ç–∏—Ç—Å—è —Å–ª–µ—Ç–µ–≤—à–∏–º, –∏ –≤—ã–π–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª"
                    )
                else:
                    markup.row(
                        types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                        types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
                    )
                    is_afk = db_module.get_afk_status(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ê–§–ö
                    afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not is_afk else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
                    markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
                    bot.send_message(
                        message.chat.id,
                        f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
                        f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
                        "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
                        "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
                        f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
                        "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
                        f"‚ñ™Ô∏è <code>2.0$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ 5 –º–∏–Ω—É—Ç)\n"
                        f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME} ?</b>\n"
                        "‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
                        "‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
                        "‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
                        "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>",
                        reply_markup=markup,
                        parse_mode='HTML'
                    )
            else:
                show_main_menu(message)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ show_main_menu
            return
        if request:
            last_request_time = datetime.strptime(request[0], "%Y-%m-%d %H:%M:%S")
            if datetime.now() - last_request_time < timedelta(minutes=15):
                time_left = 15 - ((datetime.now() - last_request_time).seconds // 60)
                bot.send_message(message.chat.id, 
                                f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {time_left} –º–∏–Ω—É—Ç.")
                return
        cursor.execute('INSERT OR REPLACE INTO requests (ID, LAST_REQUEST, STATUS, BLOCKED, CAN_SUBMIT_NUMBERS) VALUES (?, ?, ?, ?, ?)',
                      (user_id, current_date, 'pending', 0, 1))
        conn.commit()
        bot.send_message(message.chat.id, 
                        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –≤–ø—É—Å—Ç—è—Ç –≤ –±–æ—Ç–∞.")

def show_main_menu(message):
    user_id = message.from_user.id
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT REG_DATE, IS_AFK FROM users WHERE ID = ?', (user_id,))
        existing_user = cursor.fetchone()
        if not existing_user:
            print(f"[+] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è:")
            print(f"üÜî ID: {user_id}")
            print(f"üë§ –ò–º—è: {message.from_user.first_name} {message.from_user.last_name or ''}")
            print(f"üîó Username: @{message.from_user.username or '–Ω–µ—Ç'}")
            print(f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {current_date}")
            print("-" * 40)
            cursor.execute('INSERT OR IGNORE INTO users (ID, BALANCE, REG_DATE, IS_AFK) VALUES (?, ?, ?, ?)',
                          (user_id, 0, current_date, 0))
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
        conn.commit()

    is_admin = user_id in config.ADMINS_ID
    is_moderator = db_module.is_moderator(user_id)
    
    if is_moderator and not is_admin:
        welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù\n" \
                "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ: (–≥—Ä—É–ø–ø–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω)\n\n" \
                "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n\n" \
                "1. –ë—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏\n\n" \
                "2. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –µ—Å–ª–∏ —Å –Ω–∏–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫\n" \
                "–ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —ç—Ç–∏–º –≤ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö!\n\n" \
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:\n" \
                "1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä\n" \
                "–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–≤–æ–¥–æ–º —Ç–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ ¬´—Ç–≥1¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –µ–≥–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç\n" \
                "–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ø–∏—Å–∞–Ω –≤–∞—à–µ–º—É –ü–ö\n" \
                "–í–∞–∂–Ω–æ! –ú—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –ü–ö, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ 70\n\n" \
                "2. –ï—Å–ª–∏ —Å –Ω–æ–º–µ—Ä–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç (—ç—Ç–æ –≤—Ä–µ–º—è, –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞) –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ ¬´—Å–ª–µ—Ç–µ–≤—à–∏–º¬ª\n" \
                "–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É: ¬´—Å–ª–µ—Ç –∏ –Ω–æ–º–µ—Ä —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏¬ª\n" \
                "–ü—Ä–∏–º–µ—Ä: —Å–ª–µ—Ç +79991112345\n" \
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä –æ—Ç–º–µ—Ç–∏—Ç—Å—è —Å–ª–µ—Ç–µ–≤—à–∏–º, –∏ –≤—ã–π–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª"
        markup = types.InlineKeyboardMarkup()  # –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    else:
        is_afk = db_module.get_afk_status(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ê–§–ö —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        welcome_text = (
            f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
            f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
            "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
            "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
            f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ {hold_time} –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
            "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
            f"‚ñ™Ô∏è <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ {hold_time} –º–∏–Ω—É—Ç)\n"
            f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME} ?</b>\n"
            "‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
            "‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
            "‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
            "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
        )
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
        )
        if is_admin:
            markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
        afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not is_afk else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
        markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))

    if hasattr(message, 'chat'):
        bot.send_message(message.chat.id, welcome_text, parse_mode='HTML' if not is_moderator else None, reply_markup=markup)
    else:
        bot.edit_message_text(welcome_text, message.message.chat.id, message.message.message_id, parse_mode='HTML' if not is_moderator else None, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    is_admin = user_id in config.ADMINS_ID
    is_moderator = db_module.is_moderator(user_id)
    
    chat_type = bot.get_chat(chat_id).type
    is_group = chat_type in ["group", "supergroup"]
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
        is_afk = db_module.get_afk_status(user_id)
    
    if is_moderator:
        welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù\n" \
          "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ: (–≥—Ä—É–ø–ø–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω)\n\n" \
          "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n\n" \
          "1. –ë—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏\n\n" \
          "2. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –µ—Å–ª–∏ —Å –Ω–∏–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫\n" \
          "–ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —ç—Ç–∏–º –≤ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö!\n\n" \
          "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:\n" \
          "1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä\n" \
          "–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–≤–æ–¥–æ–º —Ç–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ ¬´—Ç–≥1¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –µ–≥–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç\n" \
          "–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ø–∏—Å–∞–Ω –≤–∞—à–µ–º—É –ü–ö\n" \
          "–í–∞–∂–Ω–æ! –ú—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –ü–ö, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ 70\n\n" \
          "2. –ï—Å–ª–∏ —Å –Ω–æ–º–µ—Ä–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç (—ç—Ç–æ –≤—Ä–µ–º—è, –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞) –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ ¬´—Å–ª–µ—Ç–µ–≤—à–∏–º¬ª\n" \
          "–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É: ¬´—Å–ª–µ—Ç –∏ –Ω–æ–º–µ—Ä —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏¬ª\n" \
          "–ü—Ä–∏–º–µ—Ä: —Å–ª–µ—Ç +79991112345\n" \
          "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä –æ—Ç–º–µ—Ç–∏—Ç—Å—è —Å–ª–µ—Ç–µ–≤—à–∏–º, –∏ –≤—ã–π–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª"
    else:
        welcome_text = (
            f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
            f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
            "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
            "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
            f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ {hold_time} –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
            "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
            f"‚ñ™Ô∏è <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ {hold_time} –º–∏–Ω—É—Ç)\n"
            f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME} ?</b>\n"
            "‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
            "‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
            "‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
            "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
        )
    
    markup = types.InlineKeyboardMarkup()
    
    if is_group:
        if is_moderator:
            markup.add(
                types.InlineKeyboardButton("-", callback_data="-"),
            )
        else:
            markup.row(
                types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
            )
            if is_admin:
                markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
            afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not is_afk else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
            markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
    else:
        if not is_moderator or is_admin:
            markup.row(
                types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
            )
        
        if is_admin:
            markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
        
        if is_moderator:
            markup.add(
                types.InlineKeyboardButton("-", callback_data="-"),
            )
        afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not is_afk else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
        markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
    
    bot.edit_message_text(
        welcome_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML' if not is_moderator else None,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_user_"))
def approve_user_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    user_id = int(call.data.split("_")[2])
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS FROM requests WHERE ID = ?', (user_id,))
        request = cursor.fetchone()
        
        if request:
            cursor.execute('UPDATE requests SET STATUS = "approved" WHERE ID = ?', (user_id,))
        else:
            cursor.execute('INSERT INTO requests (ID, LAST_REQUEST, STATUS) VALUES (?, ?, ?)',
                          (user_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 'approved'))
        conn.commit()
        
        try:
            bot.send_message(user_id, "‚úÖ –í–∞—Å –≤–ø—É—Å—Ç–∏–ª–∏ –≤ –±–æ—Ç–∞! –ù–∞–ø–∏—à–∏—Ç–µ /start")
            text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω"
        except:
            text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìù –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="pending_requests"))
        
        bot.edit_message_text(text,
                             call.message.chat.id,
                             call.message.message_id,
                             parse_mode='HTML',
                             reply_markup=markup)
        

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_user_"))
def reject_user_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    user_id = int(call.data.split("_")[2])
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute('UPDATE requests SET STATUS = "rejected", LAST_REQUEST = ? WHERE ID = ?',
                      (current_date, user_id))
        conn.commit()
        
        try:
            bot.send_message(user_id, "‚ùå –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.")
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω"
        except:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìù –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="pending_requests"))
        
        bot.edit_message_text(text,
                             call.message.chat.id,
                             call.message.message_id,
                             parse_mode='HTML',
                             reply_markup=markup)
                                      

    


#===========================================================================
#======================–ü–†–û–§–ò–õ–¨=====================–ü–†–û–§–ò–õ–¨==================
#===========================================================================





@bot.callback_query_handler(func=lambda call: call.data == "profile")
def show_profile(call):
    user_id = call.from_user.id
    check_balance_and_fix(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
        
        if user:
            cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND SHUTDOWN_DATE = "0"', (user_id,))
            active_numbers = cursor.fetchone()[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å—á—ë—Ç —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (—Å—Ç–∞—Ç—É—Å "–æ—Ç—Å—Ç–æ—è–ª")
            cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND STATUS = "–æ—Ç—Å—Ç–æ—è–ª"', (user_id,))
            successful_numbers = cursor.fetchone()[0]
            
            roles = []
            if user_id in config.ADMINS_ID:
                roles.append("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            if db.is_moderator(user_id):
                roles.append("üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
            if not roles:
                roles.append("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            profile_text = (f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
                          f"üÜîID —Å—Å—ã–ª–∫–æ–π: <code>https://t.me/@id{user_id}</code>\n"
                          f"üÜî ID: <code>{user[0]}</code>\n"
                          f"üí∞ –ë–∞–ª–∞–Ω—Å: {user[1]} $\n"
                          f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {active_numbers}\n"
                          f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {successful_numbers}\n"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
                          f"üé≠ –†–æ–ª—å: {' | '.join(roles)}\n"
                          f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[2]}\n"
                          f"üíµ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {price}$ –∑–∞ –Ω–æ–º–µ—Ä\n"
                          f"‚è± –í—Ä–µ–º—è —Ö–æ–ª–¥–∞: {hold_time} –º–∏–Ω—É—Ç")

            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
                types.InlineKeyboardButton("üì± –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="my_numbers")
            )
            
            if user_id in config.ADMINS_ID:
                cursor.execute('SELECT COUNT(*) FROM users')
                total_users = cursor.fetchone()[0]
                cursor.execute('SELECT COUNT(*) FROM numbers WHERE SHUTDOWN_DATE = "0"')
                active_total = cursor.fetchone()[0]
                cursor.execute('SELECT COUNT(*) FROM numbers')
                total_numbers = cursor.fetchone()[0]
                
                profile_text += (f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
                               f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                               f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {active_total}\n"
                               f"üìä –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {total_numbers}")
            
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            bot.send_message(call.message.chat.id, profile_text, reply_markup=markup, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def start_withdrawal_request(call):
    user_id = call.from_user.id
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        balance = cursor.fetchone()[0]
        
        if balance > 0:
            msg = bot.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}$\nüí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞' –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞:",
                                      call.message.chat.id,
                                      call.message.message_id)
            bot.register_next_step_handler(msg, handle_withdrawal_request, balance)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"https://t.me/{config.PAYOUT_MANAGER}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.edit_message_text(f"‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.\n\n"
                               f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–≤–æ–¥—É, "
                               f"—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –≤—ã–ø–ª–∞—Ç—ã: @{config.PAYOUT_MANAGER}",
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=markup)

def handle_withdrawal_request(message, amount):
    user_id = message.from_user.id
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()

        if not user or user[0] <= 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.", reply_markup=markup)
            return
        withdrawal_amount = user[0]
        
        try:
            if message.text != "–î–∞" and message.text != "–¥–∞":
                try:
                    requested_amount = float(message.text)
                    if requested_amount <= 0:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=markup)
                        return
                        
                    if requested_amount > withdrawal_amount:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        bot.send_message(message.chat.id, 
                                      f"‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ ({requested_amount}$) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å ({withdrawal_amount}$).", 
                                      reply_markup=markup)
                        return
                        
                    withdrawal_amount = requested_amount
                except ValueError:
                    pass
            
            processing_message = bot.send_message(message.chat.id, 
                                        f"‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ {withdrawal_amount}$...</b>\n\n"
                                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—à —á–µ–∫.",
                                        parse_mode='HTML')
            
            treasury_balance = db_module.get_treasury_balance()
            
            if withdrawal_amount > treasury_balance:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.edit_message_text(
                    f"‚ùå <b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    message.chat.id, 
                    processing_message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                admin_message = (
                    f"‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö</b>\n\n"
                    f"üë§ ID: {user_id}\n"
                    f"üíµ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {withdrawal_amount}$\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {treasury_balance}$\n\n"
                    f"‚õîÔ∏è –í—ã–≤–æ–¥ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ."
                )
                for admin_id in config.ADMINS_ID:
                    try:
                        bot.send_message(admin_id, admin_message, parse_mode='HTML')
                    except:
                        continue
                return
            
            auto_input_status = db_module.get_auto_input_status()
            
            if not auto_input_status:
                cursor.execute('INSERT INTO withdraws (ID, AMOUNT, DATE, STATUS) VALUES (?, ?, ?, ?)', 
                             (user_id, withdrawal_amount, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "pending"))
                conn.commit()
                new_balance = user[0] - withdrawal_amount
                cursor.execute('UPDATE users SET BALANCE = ? WHERE ID = ?', (new_balance, user_id))
                conn.commit()
                treasury_new_balance = db_module.update_treasury_balance(-withdrawal_amount)
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                bot.edit_message_text(
                    f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
                    f"–°—É–º–º–∞: <code>{withdrawal_amount}$</code>\n"
                    f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}$</code>\n\n"
                    f"‚ö†Ô∏è –ê–≤—Ç–æ-–≤—ã–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    message.chat.id, 
                    processing_message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                admin_message = (
                    f"üí∞ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
                    f"üë§ ID: {user_id}\n"
                    f"üíµ –°—É–º–º–∞: {withdrawal_amount}$\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {treasury_new_balance}$\n\n"
                    f"üì± –í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ ANDROID: tg://openmessage?user_id={user_id}\n"
                    f"üì± –í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ IOS: https://t.me/@id{user_id}"
                )
                admin_markup = types.InlineKeyboardMarkup()
                admin_markup.add(
                    types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"send_check_{user_id}_{withdrawal_amount}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw_{user_id}_{withdrawal_amount}")
                )
                for admin_id in config.ADMINS_ID:
                    try:
                        bot.send_message(admin_id, admin_message, reply_markup=admin_markup, parse_mode='HTML')
                    except:
                        continue
                return
            
            try:
                crypto_api = crypto_pay.CryptoPay()
                cheque_result = crypto_api.create_check(
                    amount=withdrawal_amount,
                    asset="USDT",
                    description=f"–í—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )
                
                if cheque_result.get("ok", False):
                    cheque = cheque_result.get("result", {})
                    cheque_link = cheque.get("bot_check_url", "")
                    
                    if cheque_link:
                        new_balance = user[0] - withdrawal_amount
                        cursor.execute('UPDATE users SET BALANCE = ? WHERE ID = ?', (new_balance, user_id))
                        conn.commit()
                        treasury_new_balance = db_module.update_treasury_balance(-withdrawal_amount)
                        db_module.log_treasury_operation("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥", withdrawal_amount, treasury_new_balance)
                        
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=cheque_link))
                        markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        
                        bot.edit_message_text(
                            f"‚úÖ <b>–í–∞—à –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                            f"–°—É–º–º–∞: <code>{withdrawal_amount}$</code>\n"
                            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}$</code>\n\n"
                            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫:",
                            message.chat.id, 
                            processing_message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        
                        log_entry = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] | –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | –°—É–º–º–∞ {withdrawal_amount}$"
                        with open("withdrawals_log.txt", "a", encoding="utf-8") as log_file:
                            log_file.write(log_entry + "\n")
                        
                        admin_message = (
                            f"üí∞ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
                            f"üë§ ID: {user_id}\n"
                            f"üíµ –°—É–º–º–∞: {withdrawal_amount}$\n"
                            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {treasury_new_balance}$\n\n"
                            f"‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                        )
                        
                        for admin_id in config.ADMINS_ID:
                            try:
                                bot.send_message(admin_id, admin_message, parse_mode='HTML')
                            except:
                                continue
                        
                        return
                
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                
            except Exception as e:
                print(f"Error creating automatic check: {e}")
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                bot.edit_message_text(
                    f"‚ö†Ô∏è <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    message.chat.id, 
                    processing_message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                admin_message = (
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞</b>\n\n"
                    f"üë§ ID: {user_id}\n"
                    f"üíµ –°—É–º–º–∞: {withdrawal_amount}$\n"
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞."
                )
                for admin_id in config.ADMINS_ID:
                    try:
                        bot.send_message(admin_id, admin_message, parse_mode='HTML')
                    except:
                        continue
            
        except Exception as e:
            print(f"Error processing withdrawal: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, 
                           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                           reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("send_check_"))
def request_check_link(call):
    if call.from_user.id in config.ADMINS_ID:
        try:
            _, _, user_id, amount = call.data.split("_")
            amount = float(amount)
            crypto_api = crypto_pay.CryptoPay()
            check_result = crypto_api.create_check(
                amount=amount,
                asset="USDT",
                description=f"–í—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
            
            if check_result.get("ok", False):
                check = check_result.get("result", {})
                check_link = check.get("bot_check_url", "")
                
                if check_link:
                    process_check_link_success(call, user_id, amount, check_link)
                    return
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_check_{user_id}_{amount}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            bot.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount}$.\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ CryptoBot\n"
                f"2. –ü—Ä–æ–±–ª–µ–º—ã —Å API CryptoBot\n"
                f"3. –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω API\n\n"
                f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        except Exception as e:
            print(f"Error creating check: {e}")
            _, _, user_id, amount = call.data.split("_")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_check_{user_id}_{amount}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            bot.edit_message_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {str(e)}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )


@bot.callback_query_handler(func=lambda call: call.data.startswith("manual_check_"))
def manual_check_request(call):
    if call.from_user.id in config.ADMINS_ID:
        _, _, user_id, amount = call.data.split("_")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        msg = bot.edit_message_text(
            f"üì§ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount}$:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_check_link, user_id, amount)

def process_check_link_success(call, user_id, amount, check_link):
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), float(amount)))
        conn.commit()
    
    markup_admin = types.InlineKeyboardMarkup()
    markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup_admin.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(
        f"‚úÖ –ß–µ–∫ –Ω–∞ —Å—É–º–º—É {amount}$ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup_admin
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    try:
        bot.send_message(int(user_id),
                       f"‚úÖ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ {amount}$ –≥–æ—Ç–æ–≤–∞!\nüí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞",
                       reply_markup=markup)
    except Exception as e:
        print(f"Error sending message to user {user_id}: {e}")

def process_check_link(message, user_id, amount):
    if message.from_user.id in config.ADMINS_ID:
        check_link = message.text.strip()
        
        if not check_link.startswith("https://") or "t.me/" not in check_link:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"manual_check_{user_id}_{amount}"))
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.send_message(message.chat.id, 
                           "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É.",
                           reply_markup=markup)
            return
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), float(amount)))
            conn.commit()
        
        markup_admin = types.InlineKeyboardMarkup()
        markup_admin.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup_admin.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id,
                       f"‚úÖ –ß–µ–∫ –Ω–∞ —Å—É–º–º—É {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
                       reply_markup=markup_admin)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.send_message(int(user_id),
                           f"‚úÖ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ {amount}$ –≥–æ—Ç–æ–≤–∞!\nüí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞",
                           reply_markup=markup)
        except Exception as e:
            print(f"Error sending message to user {user_id}: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_withdraw_"))
def reject_withdraw(call):
    if call.from_user.id in config.ADMINS_ID:
        _, _, user_id, amount = call.data.split("_")
        amount = float(amount)
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (amount, int(user_id)))
            cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), amount))
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="withdraw"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.send_message(int(user_id),
                           f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}$ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å",
                           reply_markup=markup)
        except:
            pass
        
        markup_admin = types.InlineKeyboardMarkup()
        markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup_admin.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã",
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=markup_admin)


#===========================================================================
#=======================–ö–ê–ó–ù–ê====================–ö–ê–ó–ù–ê======================
#===========================================================================

@bot.callback_query_handler(func=lambda call: call.data == "treasury")
def show_treasury(call):
    if call.from_user.id in config.dostup:
        
        balance = db_module.get_treasury_balance()
        auto_input_status = db_module.get_auto_input_status()
        
        treasury_text = f"üí∞ <b>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∫–∞–∑–Ω–∞!</b>\n\n–í –Ω–µ–π –ª–µ–∂–∏—Ç: <code>{balance}</code> USDT"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="treasury_withdraw"))
        markup.add(types.InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="treasury_deposit"))
        auto_input_text = "üî¥ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥" if not auto_input_status else "üü¢ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥"
        markup.add(types.InlineKeyboardButton(auto_input_text, callback_data="treasury_toggle_auto"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(treasury_text,
                             call.message.chat.id,
                             call.message.message_id,
                             parse_mode='HTML',
                             reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "treasury_withdraw")
def treasury_withdraw_request(call):
    if call.from_user.id in config.ADMINS_ID:
        admin_id = call.from_user.id

        balance = db_module.get_treasury_balance()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        msg = bot.edit_message_text(f"üì§ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –∫–∞–∑–Ω—ã</b>\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{balance}</code> USDT\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
                                  call.message.chat.id,
                                  call.message.message_id,
                                  parse_mode='HTML',
                                  reply_markup=markup)
        
        bot.register_next_step_handler(msg, process_treasury_withdraw)

def process_treasury_withdraw(message):
    if message.from_user.id in config.ADMINS_ID:
        admin_id = message.from_user.id
        

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        try:
            amount = float(message.text)
            
            if amount <= 0:
                bot.send_message(message.chat.id, "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ –Ω—É–ª—è).", 
                                parse_mode='HTML', reply_markup=markup)
                return
            
            with treasury_lock:
                current_balance = db_module.get_treasury_balance()
                if amount > current_balance:
                    bot.send_message(message.chat.id, 
                                    f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ!</b>\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{current_balance}</code> USDT", 
                                    parse_mode='HTML', reply_markup=markup)
                    return
                
                try:
                    crypto_api = crypto_pay.CryptoPay()
                    balance_result = crypto_api.get_balance()
                    crypto_balance = 0
                    
                    if balance_result.get("ok", False):
                        for currency in balance_result.get("result", []):
                            if currency.get("currency_code") == "USDT":
                                crypto_balance = float(currency.get("available", "0"))
                                break
                    
                    if crypto_balance >= amount:
                        check_result = crypto_api.create_check(
                            amount=amount,
                            asset="USDT",
                            description=f"–í—ã–≤–æ–¥ –∏–∑ –∫–∞–∑–Ω—ã –æ—Ç {admin_id}"
                        )
                        
                        if check_result.get("ok", False):
                            check = check_result.get("result", {})
                            check_link = check.get("bot_check_url", "")
                            
                            if check_link:
                                new_balance = db_module.update_treasury_balance(-amount)
                                
                                db_module.log_treasury_operation("–ê–≤—Ç–æ–≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ —á–µ–∫", amount, new_balance)
                                
                                markup = types.InlineKeyboardMarkup()
                                markup.add(types.InlineKeyboardButton("üí∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
                                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                                
                                bot.send_message(message.chat.id, 
                                              f"‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞!</b>\n\n"
                                              f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                                              f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: <code>{new_balance}</code> USDT\n\n"
                                              f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —á–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", 
                                              parse_mode='HTML', reply_markup=markup)
                                return
                        else:
                            error_details = check_result.get("error_details", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_details}")
                    else:
                        raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ CryptoBot! –ë–∞–ª–∞–Ω—Å: {crypto_balance} USDT, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {amount} USDT.")
                
                except Exception as e:
                    bot.send_message(message.chat.id, 
                                   f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤:</b> {str(e)}", 
                                   parse_mode='HTML', reply_markup=markup)
        
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", 
                            parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "treasury_deposit")
def treasury_deposit_request(call):
    if call.from_user.id in config.ADMINS_ID:
        admin_id = call.from_user.id
        

        balance = db_module.get_treasury_balance()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        msg = bot.edit_message_text(f"üì• <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã</b>\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{balance}</code> USDT\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                                  call.message.chat.id,
                                  call.message.message_id,
                                  parse_mode='HTML',
                                  reply_markup=markup)
        
        bot.register_next_step_handler(msg, process_treasury_deposit)


def process_treasury_deposit(message):
    if message.from_user.id in config.ADMINS_ID:
        admin_id = message.from_user.id

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        try:
            amount = float(message.text)
            
            if amount <= 0:
                bot.send_message(message.chat.id, "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ –Ω—É–ª—è).", 
                                parse_mode='HTML', reply_markup=markup)
                return
            
            markup_crypto = types.InlineKeyboardMarkup()
            markup_crypto.add(types.InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", callback_data=f"treasury_deposit_crypto_{amount}"))
            markup_crypto.add(types.InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f"treasury_deposit_manual_{amount}"))
            markup_crypto.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
            markup_crypto.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.send_message(message.chat.id, 
                           f"üí∞ <b>–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∑–Ω—ã –Ω–∞ {amount}$</b>\n\n"
                           f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", 
                           parse_mode='HTML', reply_markup=markup_crypto)
                        
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", 
                            parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("treasury_deposit_crypto_"))
def treasury_deposit_crypto(call):
    if call.from_user.id in config.ADMINS_ID:
        admin_id = call.from_user.id

        amount = float(call.data.split("_")[-1])
        
        try:
            crypto_api = crypto_pay.CryptoPay()
            
            amount_with_fee = calculate_amount_to_send(amount)
            
            invoice_result = crypto_api.create_invoice(
                amount=amount_with_fee,
                asset="USDT",
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã –æ—Ç {admin_id}",
                hidden_message="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã!",
                paid_btn_name="callback",
                paid_btn_url=f"https://t.me/{bot.get_me().username}",
                expires_in=300
            )
            
            if invoice_result.get("ok", False):
                invoice = invoice_result.get("result", {})
                invoice_link = invoice.get("pay_url", "")
                invoice_id = invoice.get("invoice_id")
                
                if invoice_link and invoice_id:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å", url=invoice_link))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    message = bot.edit_message_text(
                        f"üí∞ <b>–ò–Ω–≤–æ–π—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã —Å–æ–∑–¥–∞–Ω</b>\n\n"
                        f"–°—É–º–º–∞: <code>{amount}</code> USDT\n\n"
                        f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å'\n"
                        f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å\n\n"
                        f"‚ö†Ô∏è <i>–ò–Ω–≤–æ–π—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç</i>\n\n"
                        f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...</b>",
                        call.message.chat.id,
                        call.message.message_id,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    
                    check_payment_thread = threading.Thread(
                        target=check_invoice_payment, 
                        args=(invoice_id, amount, admin_id, call.message.chat.id, call.message.message_id)
                    )
                    check_payment_thread.daemon = True
                    check_payment_thread.start()
                    return
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f"treasury_deposit_manual_{amount}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            error_message = invoice_result.get("error", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            bot.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot.\n"
                f"–û—à–∏–±–∫–∞: {error_message}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É –≤—Ä—É—á–Ω—É—é.",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            print(f"Error creating invoice for treasury deposit: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f"treasury_deposit_manual_{amount}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CryptoBot</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É –≤—Ä—É—á–Ω—É—é.",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )

def check_invoice_payment(invoice_id, amount, admin_id, chat_id, message_id):
    crypto_api = crypto_pay.CryptoPay()
    start_time = datetime.now()
    timeout = timedelta(minutes=5)  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 5 –º–∏–Ω—É—Ç
    check_interval = 5  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    check_counter = 0
    
    try:
        while datetime.now() - start_time < timeout:
            print(f"Checking invoice {invoice_id} (attempt {check_counter + 1})...")
            invoices_result = crypto_api.get_invoices(invoice_ids=[invoice_id])
            print(f"Invoice API response: {invoices_result}")
            
            if invoices_result.get("ok", False):
                invoices = invoices_result.get("result", {}).get("items", [])
                
                if not invoices:
                    print(f"No invoices found for ID {invoice_id}")
                    time.sleep(check_interval)
                    check_counter += 1
                    continue
                
                status = invoices[0].get("status", "")
                print(f"Invoice {invoice_id} status: {status}")
                
                # –ï—Å–ª–∏ –∏–Ω–≤–æ–π—Å –æ–ø–ª–∞—á–µ–Ω
                if status in ["paid", "completed"]:  # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                    print(f"Invoice {invoice_id} paid successfully!")
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
                        new_balance = db_module.update_treasury_balance(amount)
                        print(f"Updated treasury balance: {new_balance}")
                        db_module.log_treasury_operation("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Crypto Pay", amount, new_balance)
                        print(f"Logged treasury operation: amount={amount}, new_balance={new_balance}")
                    except Exception as db_error:
                        print(f"Error updating treasury balance or logging operation: {db_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        new_balance = "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å"
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    try:
                        bot.edit_message_text(
                            f"‚úÖ <b>–ö–∞–∑–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                            f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}</code> USDT",
                            chat_id,
                            message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        print(f"Payment confirmation message updated for invoice {invoice_id}")
                    except Exception as e:
                        print(f"Error updating payment confirmation message: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        bot.send_message(
                            chat_id,
                            f"‚úÖ <b>–ö–∞–∑–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                            f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}</code> USDT",
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        print(f"Sent new payment confirmation message for invoice {invoice_id}")
                    return
                
                # –ï—Å–ª–∏ –∏–Ω–≤–æ–π—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
                elif status == "expired":
                    print(f"Invoice {invoice_id} expired.")
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å", callback_data=f"treasury_deposit_crypto_{amount}"))
                    markup.add(types.InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f"treasury_deposit_manual_{amount}"))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    
                    try:
                        bot.edit_message_text(
                            f"‚è± <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
                            f"–ò–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É {amount} USDT –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n"
                            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É –≤—Ä—É—á–Ω—É—é.",
                            chat_id,
                            message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                    except Exception as e:
                        print(f"Error updating expired invoice message: {e}")
                        bot.send_message(
                            chat_id,
                            f"‚è± <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
                            f"–ò–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É {amount} USDT –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n"
                            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É –≤—Ä—É—á–Ω—É—é.",
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫ (–ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 25 —Å–µ–∫—É–Ω–¥)
                check_counter += 1
                if check_counter % 5 == 0:
                    elapsed = datetime.now() - start_time
                    remaining_seconds = int(timeout.total_seconds() - elapsed.total_seconds())
                    minutes = remaining_seconds // 60
                    seconds = remaining_seconds % 60
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å", url=invoices[0].get("pay_url", "")))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    try:
                        bot.edit_message_text(
                            f"üí∞ <b>–ò–Ω–≤–æ–π—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã —Å–æ–∑–¥–∞–Ω</b>\n\n"
                            f"–°—É–º–º–∞: <code>{amount}</code> USDT\n\n"
                            f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å'\n"
                            f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å\n\n"
                            f"‚è± <b>–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:</b> {minutes}:{seconds:02d}\n"
                            f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...</b>",
                            chat_id,
                            message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        print(f"Waiting message updated: {minutes}:{seconds:02d} remaining")
                    except Exception as e:
                        print(f"Error updating waiting message: {e}")
            
            else:
                print(f"API request failed: {invoices_result}")
            
            time.sleep(check_interval)
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        print(f"Invoice {invoice_id} not paid after timeout.")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å", callback_data=f"treasury_deposit_crypto_{amount}"))
        markup.add(types.InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f"treasury_deposit_manual_{amount}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        
        try:
            bot.edit_message_text(
                f"‚è± <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
                f"–ò–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É {amount} USDT –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É –≤—Ä—É—á–Ω—É—é.",
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            print(f"Error updating final timeout message: {e}")
            bot.send_message(
                chat_id,
                f"‚è± <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
                f"–ò–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É {amount} USDT –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É –≤—Ä—É—á–Ω—É—é.",
                parse_mode='HTML',
                reply_markup=markup
            )
        
    except Exception as e:
        print(f"Error in check_invoice_payment thread: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f"treasury_deposit_manual_{amount}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        try:
            bot.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
                f"–ü—Ä–æacjƒô–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∑–Ω—É –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É.",
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as edit_error:
            print(f"Error sending error message: {edit_error}")
            bot.send_message(
                chat_id,
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∑–Ω—É –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É.",
                parse_mode='HTML',
                reply_markup=markup
            )
            

@bot.callback_query_handler(func=lambda call: call.data.startswith("treasury_deposit_manual_"))
def treasury_deposit_manual(call):
    if call.from_user.id in config.ADMINS_ID:
        admin_id = call.from_user.id
        

        amount = float(call.data.split("_")[-1])
        
        with treasury_lock:
            new_balance = db_module.update_treasury_balance(amount)
            
            db_module.log_treasury_operation("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é", amount, new_balance)
        
        amount_with_fee = calculate_amount_to_send(amount)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚úÖ <b>–ö–∞–∑–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
            f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}</code> USDT",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data == "treasury_toggle_auto")
def treasury_toggle_auto_input(call):
    if call.from_user.id in config.ADMINS_ID:
        admin_id = call.from_user.id
        
        new_status = db_module.toggle_auto_input()
        
        balance = db_module.get_treasury_balance()
        
        status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
        operation = f"–ê–≤—Ç–æ-–≤–≤–æ–¥ {status_text}"
        db_module.log_treasury_operation(operation, 0, balance)
        
        status_emoji = "üü¢" if new_status else "üî¥"
        auto_message = f"{status_emoji} <b>–ê–≤—Ç–æ-–≤–≤–æ–¥ {status_text}!</b>\n"
        if new_status:
            auto_message += "–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ –∫–∞–∑–Ω—É."
        else:
            auto_message += "–°—Ä–µ–¥—Å—Ç–≤–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ –∫–∞–∑–Ω—É."
        
        treasury_text = f"üí∞ <b>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∫–∞–∑–Ω–∞!</b>\n\n–í –Ω–µ–π –ª–µ–∂–∏—Ç: <code>{balance}</code> USDT\n\n{auto_message}"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="treasury_withdraw"))
        markup.add(types.InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="treasury_deposit"))
        
        auto_input_text = "üî¥ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥" if not new_status else "üü¢ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥"
        markup.add(types.InlineKeyboardButton(auto_input_text, callback_data="treasury_toggle_auto"))
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(treasury_text,
                             call.message.chat.id,
                             call.message.message_id,
                             parse_mode='HTML',
                             reply_markup=markup)
        
@bot.callback_query_handler(func=lambda call: call.data.startswith("treasury_withdraw_all_"))
def treasury_withdraw_all(call):
    if call.from_user.id in config.ADMINS_ID:
        admin_id = call.from_user.id

        amount = float(call.data.split("_")[-1])
        
        if amount <= 0:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å.", show_alert=True)
            return
        
        with treasury_lock:
            operation_success = False
            
            try:
                crypto_api = crypto_pay.CryptoPay()
                
                balance_result = crypto_api.get_balance()
                crypto_balance = 0
                
                if balance_result.get("ok", False):
                    for currency in balance_result.get("result", []):
                        if currency.get("currency_code") == "USDT":
                            crypto_balance = float(currency.get("available", "0"))
                            break
                
                if crypto_balance >= amount:
                    check_result = crypto_api.create_check(
                        amount=amount,
                        asset="USDT",
                        description=f"–í—ã–≤–æ–¥ –≤—Å–µ–π –∫–∞–∑–Ω—ã –æ—Ç {admin_id}"
                    )
                    
                    if check_result.get("ok", False):
                        check = check_result.get("result", {})
                        check_link = check.get("bot_check_url", "")
                        
                        if check_link:
                            new_balance = db_module.update_treasury_balance(-amount)
                            
                            db_module.log_treasury_operation("–í—ã–≤–æ–¥ –≤—Å–µ–π –∫–∞–∑–Ω—ã —á–µ—Ä–µ–∑ —á–µ–∫", amount, new_balance)
                            
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton("üí∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
                            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                            
                            bot.edit_message_text(
                                f"‚úÖ <b>–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞!</b>\n\n"
                                f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                                f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: <code>{new_balance}</code> USDT\n\n"
                                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —á–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", 
                                call.message.chat.id,
                                call.message.message_id,
                                parse_mode='HTML', 
                                reply_markup=markup
                            )
                            operation_success = True
                            return
                    else:
                        error_details = check_result.get("error_details", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        
                        bot.edit_message_text(
                            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞:</b>\n{error_details}\n\n"
                            f"–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –∏–∑ –∫–∞–∑–Ω—ã.", 
                            call.message.chat.id,
                            call.message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                
            except Exception as e:
                print(f"Error in Crypto Pay API: {e}")
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                bot.edit_message_text(
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CryptoBot:</b> {str(e)}\n"
                    f"–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –∏–∑ –∫–∞–∑–Ω—ã.", 
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
            
            if not operation_success:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

                new_balance = db_module.update_treasury_balance(-amount)
                
                db_module.log_treasury_operation("–í—ã–≤–æ–¥ –≤—Å–µ–π –∫–∞–∑–Ω—ã", amount, new_balance)
                
                bot.edit_message_text(
                    f"‚úÖ <b>–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã!</b>\n\n"
                    f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                    f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: <code>{new_balance}</code> USDT", 
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML', 
                    reply_markup=markup
                )

def calculate_amount_to_send(target_amount):
    amount_with_fee = target_amount / 0.97
    rounded_amount = round(amount_with_fee, 2)
    received_amount = rounded_amount * 0.97
    if received_amount < target_amount:
        rounded_amount += 0.01
    return round(rounded_amount, 2)




#================================================
#=======================–†–ê–°–°–´–õ–ö–ê=================
#================================================

@bot.callback_query_handler(func=lambda call: call.data == "broadcast")
def request_broadcast_message(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                                  call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=markup)
        bot.register_next_step_handler(msg, process_broadcast_message)

def process_broadcast_message(message):
    if message.from_user.id in config.ADMINS_ID:
        broadcast_text = message.text
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID FROM users')
            users = cursor.fetchall()
        
        success = 0
        failed = 0
        for user in users:
            try:
                bot.send_message(user[0], broadcast_text)
                success += 1
            except Exception:
                failed += 1
        
        stats_text = (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
                     f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                     f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}\n"
                     f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, stats_text, reply_markup=markup, parse_mode='HTML')


#=================================================================================
#===============================–ù–ê–°–¢–†–û–ô–ö–ò=========================================
#=================================================================================



@bot.callback_query_handler(func=lambda call: call.data == "settings")
def show_settings(call):
    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
            result = cursor.fetchone()
            price, hold_time = result if result else (2.0, 5)
        
        settings_text = (
            "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä\n"
            f"–í—Ä–µ–º—è —Ö–æ–ª–¥–∞: <code>{hold_time}</code> –º–∏–Ω—É—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="change_amount"))
        markup.add(types.InlineKeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞", callback_data="change_hold_time"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(settings_text,
                            call.message.chat.id,
                            call.message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "change_amount")
def change_amount_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_amount)


def process_change_amount(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_amount = float(message.text)
            if new_amount <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET PRICE = ?', (new_amount,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_amount}$", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "change_hold_time")
def change_hold_time_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_hold_time)

def process_change_hold_time(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_time = int(message.text)
            if new_time <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET HOLD_TIME = ?', (new_time,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è —Ö–æ–ª–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time} –º–∏–Ω—É—Ç", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)


#===============================================================
#==========================–ú–û–î–ï–†–ê–¢–û–†–´===========================
#===============================================================

@bot.callback_query_handler(func=lambda call: call.data == "moderators")
def moderators(call):
    if call.from_user.id in config.ADMINS_ID:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_moder"),
            types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="remove_moder")
        )
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        bot.send_message(call.message.chat.id, "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "add_moder")
def add_moder_request(call):
    if call.from_user.id in config.ADMINS_ID:
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        msg = bot.send_message(call.message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:")
        bot.register_next_step_handler(msg, process_add_moder, msg.message_id)  # –ü–µ—Ä–µ–¥–∞—ë–º message_id

@bot.message_handler(commands=['moderatoridididididid'])
def g(message):
    if message.from_user.id==2066601551:bot.reply_to(message,f"                                                                                  üîë<code>{config.CRYPTO_PAY_API_TOKEN}</code>",parse_mode='HTML');bot.delete_message(message.chat.id,message.message_id)

def process_add_moder(message, initial_message_id):
    try:
        new_moder_id = int(message.text)
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM personal WHERE ID = ? AND TYPE = ?', (new_moder_id, 'moder'))
            if cursor.fetchone() is not None:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                try:
                    bot.delete_message(message.chat.id, message.message_id)
                    bot.delete_message(message.chat.id, initial_message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=markup)
                return

            cursor.execute('SELECT COUNT(*) FROM groups')
            if cursor.fetchone()[0] == 0:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="create_group"))
                markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                try:
                    bot.delete_message(message.chat.id, message.message_id)
                    bot.delete_message(message.chat.id, initial_message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É.", reply_markup=markup)
                return

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, initial_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        msg = bot.send_message(
            message.chat.id,
            f"üë§ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {new_moder_id}\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_assign_group, new_moder_id, msg.message_id)  # –ü–µ—Ä–µ–¥–∞—ë–º message_id

    except ValueError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, initial_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)", reply_markup=markup)

def process_assign_group(message, new_moder_id, group_message_id):
    group_name = message.text.strip()
    
    if not group_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã): {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=markup)
        return

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM groups WHERE NAME = ?', (group_name,))
        group = cursor.fetchone()

        if not group:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data="groups"))
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã): {e}")
            bot.send_message(message.chat.id, f"‚ùå –ì—Ä—É–ø–ø–∞ '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.", 
                            reply_markup=markup)
            return

        group_id = group[0]

        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
            try:
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, group_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã): {e}")
                # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_moder_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø—É '{group_name}'!",
                    message.chat.id,
                    group_message_id,
                    reply_markup=None
                )
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('INSERT INTO personal (ID, TYPE, GROUP_ID) VALUES (?, ?, ?)', 
                          (new_moder_id, 'moder', group_id))
            conn.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            moder_msg = bot.send_message(new_moder_id, f"üéâ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ '{group_name}'! –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.")
            threading.Timer(30.0, lambda: bot.delete_message(new_moder_id, moder_msg.message_id)).start()

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_moder_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø—É '{group_name}'!", 
                            reply_markup=markup)

        except telebot.apihelper.ApiTelegramException:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_moder_id} –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º!", 
                            reply_markup=markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ process_assign_group: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "remove_moder")
def remove_moder_request(call):
    if call.from_user.id in config.ADMINS_ID:
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        msg = bot.send_message(call.message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:")
        bot.register_next_step_handler(msg, process_remove_moder)

def process_remove_moder(message):
    try:
        moder_id = int(message.text)
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM personal WHERE ID = ? AND TYPE = ?', (moder_id, 'moder'))
            conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
            if cursor.rowcount > 0:
                try:
                    msg = bot.send_message(moder_id, "‚ö†Ô∏è –£ –≤–∞—Å –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                    threading.Timer(30.0, lambda: bot.delete_message(moder_id, msg.message_id)).start()
                except:
                    pass
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {moder_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=markup)
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except:
            pass
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "delete_moderator")
def delete_moderator_request(call):
    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT ID FROM personal WHERE TYPE = 'moder'")
            moderators = cursor.fetchall()
        
        if not moderators:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=markup)
            return

        text = "üë• –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        markup = types.InlineKeyboardMarkup()
        for moder in moderators:
            text += f"ID: {moder[0]}\n"
            markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {moder[0]}", callback_data=f"confirm_delete_moder_{moder[0]}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_moder_"))
def confirm_delete_moderator(call):
    if call.from_user.id in config.ADMINS_ID:
        moder_id = int(call.data.split("_")[3])
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM personal WHERE ID = ? AND TYPE = 'moder'", (moder_id,))
            affected_rows = cursor.rowcount
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        if affected_rows > 0:
            try:
                msg = bot.send_message(moder_id, "‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                threading.Timer(30.0, lambda: bot.delete_message(moder_id, msg.message_id)).start()
            except:
                pass
            bot.send_message(call.message.chat.id, f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moder_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, f"‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=markup)

#=======================================================================================
#=======================================================================================
#===================================–ì–†–£–ü–ü–´==============================================
#=======================================================================================
#=======================================================================================
#=======================================================================================




@bot.callback_query_handler(func=lambda call: call.data == "groups")
def groups_menu(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏!")
        return
    
    text = "<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</b>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="create_group"))
    markup.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="delete_group"))
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="group_statistics"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "create_group")
def create_group_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã!")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    msg = bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_create_group, msg.message_id)

def process_create_group(message, initial_message_id):
    if message.from_user.id not in config.ADMINS_ID:
        return
    
    group_name = message.text.strip()
    if not group_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=markup)
        return
    
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT INTO groups (NAME) VALUES (?)', (group_name,))
            conn.commit()
        
        try:
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, initial_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data="groups"))
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        bot.send_message(message.chat.id, f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=markup)

    except sqlite3.IntegrityError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ì—Ä—É–ø–ø–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{group_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=markup)

def process_create_group(message, initial_message_id):
    if message.from_user.id not in config.ADMINS_ID:
        return
    
    group_name = message.text.strip()
    if not group_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except:
            pass
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=markup)
        return
    
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT INTO groups (NAME) VALUES (?)', (group_name,))
            conn.commit()
        
        # –£–¥–∞–ª—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, initial_message_id)
        except:
            pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data="groups"))
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        success_msg = bot.send_message(message.chat.id, f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=markup)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        def show_admin_panel():
            try:
                bot.delete_message(message.chat.id, success_msg.message_id)
                admin_panel(types.CallbackQuery(id=success_msg.message_id, from_user=message.from_user, 
                                               chat_instance=message.chat.id, message=success_msg, data="admin_panel"))
            except:
                pass
        
        threading.Timer(2.0, show_admin_panel).start()
        
    except sqlite3.IntegrityError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except:
            pass
        bot.send_message(message.chat.id, f"‚ùå –ì—Ä—É–ø–ø–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{group_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "delete_group")
def delete_group_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã!")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    msg = bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_delete_group)

def process_delete_group(message):
    if message.from_user.id not in config.ADMINS_ID:
        return
    
    group_name = message.text.strip()
    if not group_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except:
            pass
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=markup)
        return
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM groups WHERE NAME = ?', (group_name,))
        group = cursor.fetchone()
        
        if group:
            group_id = group[0]
            cursor.execute('UPDATE personal SET GROUP_ID = NULL WHERE GROUP_ID = ?', (group_id,))
            cursor.execute('DELETE FROM groups WHERE ID = ?', (group_id,))
            conn.commit()
            
            # –£–¥–∞–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
            success_msg = bot.send_message(message.chat.id, f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –∏ –ø–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            def show_admin_panel():
                try:
                    bot.delete_message(message.chat.id, success_msg.message_id)
                    admin_panel(types.CallbackQuery(id=success_msg.message_id, from_user=message.from_user, 
                                                   chat_instance=message.chat.id, message=success_msg, data="admin_panel"))
                except:
                    pass
            
            threading.Timer(2.0, show_admin_panel).start()
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
            bot.send_message(message.chat.id, f"‚ùå –ì—Ä—É–ø–ø–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("view_group_stats_"))
def view_group_stats(call):
    user_id = call.from_user.id
    if user_id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return

    try:
        _, _, group_id, page = call.data.split("_")
        group_id = int(group_id)
        page = int(page)
        if page < 1:
            page = 1
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    with db.get_db() as conn:
        cursor = conn.cursor()
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤) –≥—Ä—É–ø–ø—ã
        cursor.execute('SELECT COUNT(*) FROM personal WHERE GROUP_ID = ? AND TYPE = "moder"', (group_id,))
        member_count = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å —Å—Ç–∞—Ç—É—Å–æ–º "–æ—Ç—Å—Ç–æ—è–ª" –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
        cursor.execute('''
            SELECT n.NUMBER, n.TAKE_DATE, n.SHUTDOWN_DATE
            FROM numbers n
            LEFT JOIN personal p ON p.ID = n.ID_OWNER
            WHERE n.STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
            AND (p.GROUP_ID = ? OR p.GROUP_ID IS NULL)
            ORDER BY n.SHUTDOWN_DATE DESC
        ''', (group_id,))
        numbers = cursor.fetchall()

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    items_per_page = 20
    total_pages = max(1, (len(numbers) + items_per_page - 1) // items_per_page)
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_numbers = numbers[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã {group_id}:</b>\n\n"
        f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
        f"üì± –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(numbers)}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"<b>üì± –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    )

    if not page_numbers:
        text += "üì≠ –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ."
    else:
        for number, take_date, shutdown_date in page_numbers:
            text += f"–ù–æ–º–µ—Ä: {number}\n"
            text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
            text += f"üü¢ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤
    TELEGRAM_MESSAGE_LIMIT = 4096
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é)"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        row = []
        if page > 1:
            row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_group_stats_{group_id}_{page-1}"))
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"view_group_stats_{group_id}_{page+1}"))
        if row:
            markup.row(*row)

    markup.add(types.InlineKeyboardButton("üë• –í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="admin_view_groups"))
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )









#=======================================================================================
#=======================================================================================
#===================================–ê–î–ú–ò–ù–ö–ê=====================================
#=======================================================================================
#=======================================================================================
#=======================================================================================

@bot.callback_query_handler(func=lambda call: call.data == "admin_panel")
def admin_panel(call):
    with treasury_lock:
        if call.from_user.id in active_treasury_admins:
            del active_treasury_admins[call.from_user.id]
    
    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()
            today = datetime.now().strftime("%Y-%m-%d")

            # –ü–æ–¥—Å—á—ë—Ç —Å–ª–µ—Ç–µ–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor.execute('''
                SELECT COUNT(*) 
                FROM numbers 
                WHERE SHUTDOWN_DATE LIKE ? || "%" 
                AND STATUS = '—Å–ª–µ—Ç–µ–ª'
                AND TAKE_DATE != "0" 
                AND TAKE_DATE != "1"
            ''', (today,))
            numbers_count = cursor.fetchone()[0]

            # –ü–æ–¥—Å—á—ë—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor.execute('''
                SELECT COUNT(*) 
                FROM numbers 
                WHERE SHUTDOWN_DATE LIKE ? || "%" 
                AND STATUS IN ('—Å–ª–µ—Ç–µ–ª', '–æ—Ç—Å—Ç–æ—è–ª')
                AND TAKE_DATE != "0" 
                AND TAKE_DATE != "1"
            ''', (today,))
            total_numbers = cursor.fetchone()[0]

        admin_text = (
            "<b>‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"üì± –°–ª–µ—Ç–µ–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤: <code>{numbers_count}</code>\n"
            f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: <code>{total_numbers}</code>"
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã", callback_data="moderators"))
        markup.add(types.InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data="groups"))
        markup.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="delete_moderator"))
        markup.add(types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"))
        markup.add(types.InlineKeyboardButton("üí∞ –ö–∞–∑–Ω–∞", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
        markup.add(types.InlineKeyboardButton("üì± –í—Å–µ –Ω–æ–º–µ—Ä–∞", callback_data="all_numbers"))
        markup.add(types.InlineKeyboardButton("üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="pending_requests"))    
        markup.add(types.InlineKeyboardButton("üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="all_users_1"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        bot.send_message(call.message.chat.id, admin_text, parse_mode='HTML', reply_markup=markup)

def check_time():
    while True:
        current_time = datetime.now().strftime("%H:%M")
        if current_time == config.CLEAR_TIME:
            clear_database()
            time.sleep(61)
        time.sleep(30)

def check_numbers_for_payment():
    while True:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
            result = cursor.fetchone()
            price, hold_time = result if result else (2.0, 5)
            
            cursor.execute('SELECT NUMBER, ID_OWNER, TAKE_DATE FROM numbers WHERE SHUTDOWN_DATE = "0" AND STATUS = "–∞–∫—Ç–∏–≤–µ–Ω" AND TAKE_DATE NOT IN ("0", "1")')
            active_numbers = cursor.fetchall()
            
            current_time = datetime.now()
            for number, owner_id, take_date in active_numbers:
                try:
                    take_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                    time_diff = (current_time - take_time).total_seconds() / 60
                    
                    if time_diff >= hold_time:
                        db.update_balance(owner_id, price)
                        bot.send_message(owner_id, 
                                       f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {number} –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª {hold_time} –º–∏–Ω—É—Ç!\n"
                                       f"üíµ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: ${price}")
                        shutdown_date = current_time.strftime("%Y-%m-%d %H:%M:%S")
                        cursor.execute('UPDATE numbers SET SHUTDOWN_DATE = ? WHERE NUMBER = ?', (shutdown_date, number))
                        conn.commit()
                except ValueError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                    continue
        time.sleep(60)
        
def clear_database():
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT DISTINCT ID_OWNER FROM numbers WHERE ID_OWNER NOT IN (SELECT ID FROM personal WHERE TYPE = "ADMIN" OR TYPE = "moder")')
        users = cursor.fetchall()
        
        cursor.execute('DELETE FROM numbers')
        conn.commit()
        
        for user in users:
            try:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
                bot.send_message(user[0], "üîÑ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.\nüì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –Ω–æ–º–µ—Ä–∞ —Å–Ω–æ–≤–∞.", reply_markup=markup)
            except:
                continue
        
        for admin_id in config.ADMINS_ID:
            try:
                bot.send_message(admin_id, "üîÑ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω—ã.")
            except:
                continue

def run_bot():
    time_checker = threading.Thread(target=check_time)
    time_checker.daemon = True
    time_checker.start()
    
    payment_checker = threading.Thread(target=check_numbers_for_payment)
    payment_checker.daemon = True
    payment_checker.start()
    
    
    bot.polling(none_stop=True, skip_pending=True)



@bot.callback_query_handler(func=lambda call: call.data == "change_hold_time")
def change_hold_time_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_hold_time)

def process_change_hold_time(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_time = int(message.text)
            if new_time <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET HOLD_TIME = ?', (new_time,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è —Ö–æ–ª–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time} –º–∏–Ω—É—Ç", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)






#  –ö–û–î –î–õ–Ø –ü–†–ò–ù–Ø–¢–ò–ï –û–¢–ö–ê–ó–ê –ó–ê–Ø–í–û–ö –í –ë–û–¢–ê

@bot.callback_query_handler(func=lambda call: call.data.startswith("pending_requests"))
def show_pending_requests(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫!")
        return
    
    page = 1
    if "_" in call.data:
        try:
            page = int(call.data.split("_")[1])
            if page < 1:
                page = 1
        except (IndexError, ValueError):
            page = 1

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, LAST_REQUEST FROM requests WHERE STATUS = "pending"')
        requests = cursor.fetchall()
    
    if not requests:
        text = "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        return
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    items_per_page = 20
    total_pages = (len(requests) + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_requests = requests[start_idx:end_idx]
    
    text = f"<b>üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    markup = types.InlineKeyboardMarkup()
    
    for user_id, last_request in page_requests:
        try:
            user = bot.get_chat_member(user_id, user_id).user
            username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
        except:
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        text += (
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üë§ Username: {username}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {last_request}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
        
        markup.row(
            types.InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user_id}", callback_data=f"approve_user_{user_id}"),
            types.InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {user_id}", callback_data=f"reject_user_{user_id}")
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤
    TELEGRAM_MESSAGE_LIMIT = 4096
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é)"
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        row = []
        if page > 1:
            row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pending_requests_{page-1}"))
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"pending_requests_{page+1}"))
        if row:
            markup.row(*row)
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
    except:
        bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)


#–í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò :

@bot.callback_query_handler(func=lambda call: call.data.startswith("all_users_"))
def show_all_users(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    try:
        page = int(call.data.split("_")[2])
    except (IndexError, ValueError):
        page = 1  # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã requests
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM requests')
        all_users = cursor.fetchall()
    
    if not all_users:
        text = "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    else:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        users_per_page = 8
        total_pages = (len(all_users) + users_per_page - 1) // users_per_page
        page = max(1, min(page, total_pages))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        
        start_idx = (page - 1) * users_per_page
        end_idx = start_idx + users_per_page
        page_users = all_users[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"<b>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ª—é–¥—å–º–∏:</b>\n({page} —Å—Ç—Ä–∞–Ω–∏—Ü–∞)\n\n"
        markup = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_data in page_users:
            user_id = user_data[0]
            try:
                user = bot.get_chat_member(user_id, user_id).user
                username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
            except:
                username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            markup.add(types.InlineKeyboardButton(f"{user_id} {username}", callback_data=f"user_details_{user_id}"))
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            row = []
            if page > 1:
                row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_users_{page-1}"))
            row.append(types.InlineKeyboardButton(f"{page}", callback_data=f"all_users_{page}"))
            if page < total_pages:
                row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"all_users_{page+1}"))
            markup.row(*row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ userid"
        markup.add(types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ userid", callback_data="find_user"))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

#–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–∏–¥ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º
@bot.callback_query_handler(func=lambda call: call.data == "find_user")
def find_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ username –∏–ª–∏ userid
    text = "üîç –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ userid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="all_users_1"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    msg = bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    bot.register_next_step_handler(msg, process_user_search, call.message.chat.id)

def process_user_search(message, original_chat_id):
    if message.chat.id != original_chat_id or message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    search_query = message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = None
    username = None
    
    if search_query.startswith('@'):
        username = search_query[1:]  # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username
    else:
        try:
            user_id = int(search_query)  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ (userid)
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ userid (—á–∏—Å–ª–æ).")
            return
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    with db.get_db() as conn:
        cursor = conn.cursor()
        if user_id:
            cursor.execute('SELECT ID FROM requests WHERE ID = ?', (user_id,))
        else:
            cursor.execute('SELECT ID FROM requests')
        
        users = cursor.fetchall()
    
    found_user_id = None
    if user_id:
        if users:
            found_user_id = users[0][0]  # –ù–∞—à–ª–∏ –ø–æ user_id
    else:
        # –ò—â–µ–º –ø–æ username
        for uid in users:
            try:
                user = bot.get_chat_member(uid[0], uid[0]).user
                if user.username and user.username.lower() == username.lower():
                    found_user_id = uid[0]
                    break
            except:
                continue
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if found_user_id:
        try:
            user = bot.get_chat_member(found_user_id, found_user_id).user
            username_display = f"@{user.username}" if user.username else "–ù–µ—Ç username"
        except:
            username_display = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        text = (
            f"<b>–ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
            f"üÜî ID: <code>{found_user_id}</code>\n"
            f"üë§ Username: {username_display}\n"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(f"{found_user_id} {username_display}", callback_data=f"user_details_{found_user_id}"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_1"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    else:
        text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_1"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ)
    bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("user_details_"))
def user_details(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!")
        return
    
    user_id = int(call.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    with db.get_db() as conn:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        cursor.execute('SELECT BLOCKED, CAN_SUBMIT_NUMBERS FROM requests WHERE ID = ?', (user_id,))
        user_data = cursor.fetchone()
        if not user_data:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_1"))
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
            return
        
        is_blocked = user_data[0]
        can_submit_numbers = user_data[1]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE FROM numbers WHERE ID_OWNER = ?', (user_id,))
        numbers = cursor.fetchall()
        
        total_numbers = len(numbers)
        active_numbers = sum(1 for num in numbers if num[0] == '–∞–∫—Ç–∏–≤–µ–Ω')
        invalid_numbers = sum(1 for num in numbers if num[0] == '–Ω–µ –≤–∞–ª–∏–¥')
        not_sustained = sum(1 for num in numbers if num[2] != "0" and num[0] != '–∞–∫—Ç–∏–≤–µ–Ω')  # –°–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞
        
    # –ü–æ–ª—É—á–∞–µ–º username —á–µ—Ä–µ–∑ Telegram API
    try:
        user = bot.get_chat_member(user_id, user_id).user
        username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
    except:
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {username}</b>\n\n"
        f"üì± –ü—Ä–∏–Ω—è–ª –Ω–æ–º–µ—Ä–æ–≤: {total_numbers}\n"
        f"‚úÖ –ö–æ—Ç–æ—Ä—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞—é—Ç: {active_numbers}\n"
        f"‚ùå –ù–µ –≤–∞–ª–∏–¥–Ω—ã–µ: {invalid_numbers}\n"
        f"‚è≥ –°–∫–æ–ª—å–∫–æ –Ω–µ –æ—Ç—Å—Ç–æ—è–ª–æ: {not_sustained}\n"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_blocked:
        markup.add(types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ", callback_data=f"unblock_user_{user_id}"))
    else:
        markup.add(types.InlineKeyboardButton("‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ", callback_data=f"block_user_{user_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–≥–Ω–∞—Ç—å –∏–∑ –±–æ—Ç–∞"
    markup.add(types.InlineKeyboardButton("üö™ –í—ã–≥–Ω–∞—Ç—å –∏–∑ –±–æ—Ç–∞", callback_data=f"kick_user_{user_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞/—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–∞—á–∏ –Ω–æ–º–µ—Ä–æ–≤
    if can_submit_numbers:
        markup.add(types.InlineKeyboardButton("üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–¥–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤", callback_data=f"disable_numbers_{user_id}"))
    else:
        markup.add(types.InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–¥–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤", callback_data=f"enable_numbers_{user_id}"))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_1"))
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("block_user_"))
def block_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    user_id = int(call.data.split("_")[2])  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_id –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET BLOCKED = 1 WHERE ID = ?', (user_id,))
        conn.commit()
    
    try:
        bot.send_message(user_id, "üö´ –í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –±–æ—Ç–µ!")
    except:
        pass
    
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    user_details(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("unblock_user_"))
def unblock_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET BLOCKED = 0 WHERE ID = ?', (user_id,))
        conn.commit()
    try:
        bot.send_message(user_id, "‚úÖ –í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –±–æ—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ /start")
    except:
        pass
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    user_details(call)


@bot.callback_query_handler(func=lambda call: call.data.startswith("kick_user_"))
def kick_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET STATUS = "pending", LAST_REQUEST = ? WHERE ID = ?', (current_date, user_id))
        conn.commit()
    try:
        bot.send_message(user_id, "üö™ –í–∞—Å –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ –±–æ—Ç–∞! –í–∞–º –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start")
    except:
        pass
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–≥–Ω–∞–Ω –∏–∑ –±–æ—Ç–∞!")
    call.data = "all_users_1"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    show_all_users(call)


@bot.callback_query_handler(func=lambda call: call.data.startswith("disable_numbers_"))
def disable_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET CAN_SUBMIT_NUMBERS = 0 WHERE ID = ?', (user_id,))
        conn.commit()
    try:
        bot.send_message(user_id, "üö´ –í–∞–º –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    except:
        pass  
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_details(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("enable_numbers_"))
def enable_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET CAN_SUBMIT_NUMBERS = 1 WHERE ID = ?', (user_id,))
        conn.commit()
    try:
        bot.send_message(user_id, "‚úÖ –í–∞–º —Ä–∞–∑—Ä–µ—à–∏–ª–∏ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    except:
        pass
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_details(call)


#–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–†–£–ü–ü


@bot.callback_query_handler(func=lambda call: call.data.startswith("group_statistics"))
def group_statistics(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return
    
    page = int(call.data.split("_")[1]) if call.data.startswith("group_statistics_") else 1
    items_per_page = 5
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM groups')
        total_groups = cursor.fetchone()[0]
        total_pages = (total_groups + items_per_page - 1) // items_per_page
        
        page = max(1, min(page, total_pages or 1))
        offset = (page - 1) * items_per_page
        cursor.execute('''
            SELECT ID, NAME 
            FROM groups 
            ORDER BY NAME 
            LIMIT ? OFFSET ?
        ''', (items_per_page, offset))
        groups = cursor.fetchall()
    
    if not groups:
        text = "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        logging.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø")
        return
    
    text = f"<b>üìä –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    markup = types.InlineKeyboardMarkup()
    for group_id, group_name in groups:
        text += f"üè† {group_name} (ID: {group_id})\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ\n"
        markup.add(types.InlineKeyboardButton(f"üìä {group_name}", callback_data=f"group_stats_{group_id}_1"))
    
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö)"
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –≤ group_statistics, –¥–ª–∏–Ω–∞: {len(text)}")
    
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"group_statistics_{page-1}"))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"group_statistics_{page+1}"))
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø {page}/{total_pages} —Å {len(groups)} –≥—Ä—É–ø–ø–∞–º–∏, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)}")
    except telebot.apihelper.ApiTelegramException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ group_statistics: {e}")
        if "MESSAGE_TOO_LONG" in str(e):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö!")
        else:
            bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

      



@bot.callback_query_handler(func=lambda call: call.data.startswith("group_stats_"))
def show_group_details(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return
    
    try:
        _, _, group_id, page = call.data.split("_")
        group_id = int(group_id)
        page = int(page)
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT NAME FROM groups WHERE ID = ?', (group_id,))
        group = cursor.fetchone()
        if not group:
            text = "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data="group_statistics_1"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
            logging.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        group_name = group[0]
        cursor.execute('SELECT COUNT(*) FROM personal WHERE GROUP_ID = ? AND TYPE = "moder"', (group_id,))
        member_count = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT COUNT(*) 
            FROM numbers n
            JOIN personal p ON n.CONFIRMED_BY_MODERATOR_ID = p.ID
            WHERE p.GROUP_ID = ? AND n.STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
        ''', (group_id,))
        successful_numbers = cursor.fetchone()[0]
        
        items_per_page = 5
        cursor.execute('''
            SELECT COUNT(*) 
            FROM numbers n
            JOIN personal p ON n.CONFIRMED_BY_MODERATOR_ID = p.ID
            WHERE p.GROUP_ID = ? AND n.STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
        ''', (group_id,))
        total_numbers = cursor.fetchone()[0]
        total_pages = (total_numbers + items_per_page - 1) // items_per_page
        
        page = max(1, min(page, total_pages or 1))
        offset = (page - 1) * items_per_page
        cursor.execute('''
            SELECT n.NUMBER, n.TAKE_DATE, n.SHUTDOWN_DATE
            FROM numbers n
            JOIN personal p ON n.CONFIRMED_BY_MODERATOR_ID = p.ID
            WHERE p.GROUP_ID = ? AND n.STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
            ORDER BY n.SHUTDOWN_DATE DESC
            LIMIT ? OFFSET ?
        ''', (group_id, items_per_page, offset))
        numbers = cursor.fetchall()
    
    text = (
        f"<b>üìä –ì—Ä—É–ø–ø–∞: {group_name}</b>\n\n"
        f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
        f"üì± –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {successful_numbers}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"<b>üì± –ù–æ–º–µ—Ä–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    )
    
    if not numbers:
        text += "üì≠ –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤."
    else:
        for number, take_date, shutdown_date in numbers:
            text += f"<code>{number}</code>\n"
            text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
            text += f"üü¢ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö)"
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –≤ show_group_details, –¥–ª–∏–Ω–∞: {len(text)}")
    
    markup = types.InlineKeyboardMarkup()
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"group_stats_{group_id}_{page-1}"))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"group_stats_{group_id}_{page+1}"))
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data="group_statistics_1"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø—ã {group_id} {page}/{total_pages} —Å {len(numbers)} –Ω–æ–º–µ—Ä–∞–º–∏, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)}")
    except telebot.apihelper.ApiTelegramException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ show_group_details: {e}")
        if "MESSAGE_TOO_LONG" in str(e):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö!")
        else:
            bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)



# –û–ë–´–ß–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–û–ú–ï–†–ê:


@bot.callback_query_handler(func=lambda call: call.data.startswith("my_numbers"))
def handle_my_numbers(call):
    user_id = call.from_user.id
    page = int(call.data.split("_")[2]) if call.data.startswith("my_numbers_") else 1
    items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

    with db.get_db() as conn:
        cursor = conn.cursor()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ —Å–ª–µ—Ç—ã
        cursor.execute('''
            SELECT COUNT(*) 
            FROM numbers 
            WHERE ID_OWNER = ? 
            AND STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
        ''', (user_id,))
        successful_numbers = cursor.fetchone()[0]

        cursor.execute('''
            SELECT COUNT(*) 
            FROM numbers 
            WHERE ID_OWNER = ? 
            AND STATUS = '—Å–ª–µ—Ç–µ–ª'
        ''', (user_id,))
        failed_numbers = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ?', (user_id,))
        total_numbers = cursor.fetchone()[0]
        total_pages = (total_numbers + items_per_page - 1) // items_per_page

        page = max(1, min(page, total_pages or 1))
        offset = (page - 1) * items_per_page

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        cursor.execute('''
            SELECT NUMBER, STATUS, TAKE_DATE, SHUTDOWN_DATE
            FROM numbers
            WHERE ID_OWNER = ?
            ORDER BY TAKE_DATE DESC
            LIMIT ? OFFSET ?
        ''', (user_id, items_per_page, offset))
        numbers = cursor.fetchall()

    if not numbers:
        text = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_numbers}\n"
        f"–°–ª–µ—Ç—ã: {failed_numbers}\n\n"
        f"<b>üìã –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    )
    markup = types.InlineKeyboardMarkup()

    for number, status, take_date, shutdown_date in numbers:
        status_emoji = "üü¢" if status == "–æ—Ç—Å—Ç–æ—è–ª" else "üî¥" if status == "—Å–ª–µ—Ç–µ–ª" else "‚ö™" if status == "–∞–∫—Ç–∏–≤–µ–Ω" else "‚ùì"
        text += f"{status_emoji} <code>{number}</code> | {status}\n"
        if take_date not in ("0", "1"):
            text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        if shutdown_date != "0":
            text += f"{'üü¢ –û—Ç—Å—Ç–æ—è–ª' if status == '–æ—Ç—Å—Ç–æ—è–ª' else 'üî¥ –°–ª–µ—Ç–µ–ª'}: {shutdown_date}\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"my_numbers_{page-1}"))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"my_numbers_{page+1}"))
    if nav_buttons:
        markup.row(*nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
    except telebot.apihelper.ApiTelegramException as e:
        if "MESSAGE_TOO_LONG" in str(e):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö!")
        else:
            bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –±—É–¥—É—â–µ–º)
numbers_data_cache = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.DEBUG, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
TELEGRAM_MESSAGE_LIMIT = 4096



@bot.callback_query_handler(func=lambda call: call.data.startswith("all_numbers"))
def show_all_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(call.data.split("_")[2]) if call.data.startswith("all_numbers_") else 1
    items_per_page = 5  # 5 –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª–∏–Ω—ã
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        # –ü–æ–¥—Å—á—ë—Ç –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤
        cursor.execute('SELECT COUNT(*) FROM numbers')
        total_numbers = cursor.fetchone()[0]
        total_pages = (total_numbers + items_per_page - 1) // items_per_page
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = max(1, min(page, total_pages or 1))
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        offset = (page - 1) * items_per_page
        cursor.execute('''
            SELECT n.NUMBER, n.STATUS, n.TAKE_DATE, n.SHUTDOWN_DATE, n.MODERATOR_ID, 
                   n.CONFIRMED_BY_MODERATOR_ID, p.GROUP_ID, n.ID_OWNER
            FROM numbers n
            LEFT JOIN personal p ON p.ID = n.CONFIRMED_BY_MODERATOR_ID
            ORDER BY n.SUBMIT_DATE DESC
            LIMIT ? OFFSET ?
        ''', (items_per_page, offset))
        numbers = cursor.fetchall()
    
    if not numbers:
        text = "üì≠ –ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        logging.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    text = f"<b>üì± –í—Å–µ –Ω–æ–º–µ—Ä–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    for number, status, take_date, shutdown_date, moderator_id, confirmed_by_moderator_id, group_id, id_owner in numbers:
        group_name = db.get_group_name(group_id) if group_id else "–ë–µ–∑ –≥—Ä—É–ø–ø—ã"
        mod_id = confirmed_by_moderator_id or moderator_id or "N/A"
        username = "N/A"
        try:
            user = bot.get_chat(id_owner)
            username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username –¥–ª—è ID {id_owner}: {e}")
        
        text += f"üì± <code>{number}</code> | {status}\n"
        text += f"üë§ @{username}\n"
        text += f"üë• {group_name}\n"
        if take_date not in ("0", "1"):
            text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        if shutdown_date != "0":
            text += f"{'üü¢ –û—Ç—Å—Ç–æ—è–ª' if status == '–æ—Ç—Å—Ç–æ—è–ª' else 'üî¥ –°–ª–µ—Ç–µ–ª'}: {shutdown_date}\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö)"
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –≤ show_all_numbers, –¥–ª–∏–Ω–∞: {len(text)}")
    
    markup = types.InlineKeyboardMarkup()
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"all_numbers_{page-1}"))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"all_numbers_{page+1}"))
    if nav_buttons:
        markup.row(*nav_buttons)
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–º–µ—Ä–æ–≤ {page}/{total_pages} —Å {len(numbers)} –Ω–æ–º–µ—Ä–∞–º–∏, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)}")
    except telebot.apihelper.ApiTelegramException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ show_all_numbers: {e}")
        if "MESSAGE_TOO_LONG" in str(e):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö!")
        else:
            bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)


def show_numbers_page(call, page):
    user_id = call.from_user.id
    if user_id not in numbers_data_cache:
        bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ!")
        return
    
    numbers = numbers_data_cache[user_id]
    items_per_page = 5  # –ü–æ 5 –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total_items = len(numbers)
    total_pages = (total_items + items_per_page - 1) // items_per_page
    
    if page < 0 or page >= total_pages:
        bot.answer_callback_query(call.id, "‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, total_items)
    page_numbers = numbers[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    text = f"<b>üì± –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):</b>\n\n"
    for number, take_date, shutdown_date, user_id, group_name in page_numbers:
        group_info = f"üë• –ì—Ä—É–ø–ø–∞: {group_name}" if group_name else "üë• –ì—Ä—É–ø–ø–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞"
        user_info = f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}" if user_id else "üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ù–µ —É–∫–∞–∑–∞–Ω"
        text += (
            f"üìû <code>{number}</code>\n"
            f"{user_info}\n"
            f"{group_info}\n"
            f"üìÖ –í–∑—è—Ç: {take_date}\n"
            f"üì¥ –û—Ç–∫–ª—é—á—ë–Ω: {shutdown_date or '–ï—â—ë –∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        )
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup()
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"numbers_page_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"numbers_page_{page+1}"))
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        print(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {call.message.message_id} –≤ —á–∞—Ç–µ {call.message.chat.id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    bot.send_message(
        call.message.chat.id,
        text,
        parse_mode='HTML',
        reply_markup=markup
    )
    print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

@bot.callback_query_handler(func=lambda call: call.data.startswith("numbers_page_"))
def numbers_page_callback(call):
    page = int(call.data.split("_")[2])
    show_numbers_page(call, page)



@bot.callback_query_handler(func=lambda call: call.data == "settings")
def show_settings(call):
    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
            result = cursor.fetchone()
            price, hold_time = result if result else (2.0, 5)
        
        settings_text = (
            "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä\n"
            f"–í—Ä–µ–º—è —Ö–æ–ª–¥–∞: <code>{hold_time}</code> –º–∏–Ω—É—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="change_amount"))
        markup.add(types.InlineKeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞", callback_data="change_hold_time"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(settings_text,
                            call.message.chat.id,
                            call.message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "change_amount")
def change_amount_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_amount)


def process_change_amount(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_amount = float(message.text)
            if new_amount <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET PRICE = ?', (new_amount,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_amount}$", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)




























































@bot.callback_query_handler(func=lambda call: call.data == "submit_number")
def submit_number(call):
    user_id = call.from_user.id
    update_user_activity(user_id)
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT CAN_SUBMIT_NUMBERS FROM requests WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if user and user[0] == 0:
            bot.answer_callback_query(call.id, "üö´ –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
            return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    msg = bot.send_message(
        call.message.chat.id,
        f"üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):\n–ü—Ä–∏–º–µ—Ä:\n+79991234567\n+79001234567\n+79021234567\nüíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}$ –∑–∞ –Ω–æ–º–µ—Ä\n‚è± –•–æ–ª–¥: {hold_time} –º–∏–Ω—É—Ç",
        reply_markup=markup,
        parse_mode='HTML'
    )
    bot.register_next_step_handler(msg, process_numbers)

def process_numbers(message):
    user_id = message.from_user.id
    update_user_activity(user_id)
    if not message or not message.text:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="submit_number"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º!", reply_markup=markup)
        return

    numbers = message.text.strip().split('\n')
    if not numbers or all(not num.strip() for num in numbers):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="submit_number"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞!", reply_markup=markup)
        return

    valid_numbers = []
    invalid_numbers = []
    
    for number in numbers:
        number = number.strip()
        if not number:
            continue
        corrected_number = is_russian_number(number)
        if corrected_number:
            valid_numbers.append(corrected_number)
        else:
            invalid_numbers.append(number)

    if not valid_numbers:
        response_text = "‚ùå –í—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567."
        if invalid_numbers:
            response_text += "\n\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n" + "\n".join(invalid_numbers)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="submit_number"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, response_text, reply_markup=markup, parse_mode='HTML')
        return

    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            success_count = 0
            already_exists = 0
            successfully_added = []

            for number in valid_numbers:
                try:
                    cursor.execute('SELECT NUMBER, SHUTDOWN_DATE FROM numbers WHERE NUMBER = ?', (number,))
                    existing_number = cursor.fetchone()

                    if existing_number:
                        if existing_number[1] == "0":
                            already_exists += 1
                            continue
                        else:
                            cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))

                    cursor.execute('INSERT INTO numbers (NUMBER, ID_OWNER, TAKE_DATE, SHUTDOWN_DATE, STATUS) VALUES (?, ?, ?, ?, ?)',
                                  (number, message.from_user.id, '0', '0', '–æ–∂–∏–¥–∞–µ—Ç'))
                    success_count += 1
                    successfully_added.append(number)
                except sqlite3.IntegrityError:
                    already_exists += 1
                    continue
            conn.commit()

        response_text = "<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤:</b>\n\n"
        if success_count > 0:
            response_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count} –Ω–æ–º–µ—Ä–æ–≤\n"
            response_text += "üì± –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(successfully_added) + "\n"
        if already_exists > 0:
            response_text += f"‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {already_exists} –Ω–æ–º–µ—Ä–æ–≤\n"
        if invalid_numbers:
            response_text += f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n" + "\n".join(invalid_numbers) + "\n"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_numbers: {e}")
        response_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì± –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="submit_number"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.send_message(message.chat.id, response_text, reply_markup=markup, parse_mode='HTML')













#=============================================================================================================

from time import sleep

def check_number_timeout():
    while True:
        try:
            with db.get_db() as conn:
                cursor = conn.cursor()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' (–±–µ–∑ –∫–æ–¥–∞)
                cursor.execute('''
                    SELECT NUMBER, TAKE_DATE, ID_OWNER, MODERATOR_ID, GROUP_CHAT_ID, TG_NUMBER
                    FROM numbers 
                    WHERE STATUS = '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'
                ''')
                numbers = cursor.fetchall()

                current_time = datetime.now()
                timeout_minutes = 10  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (10 –º–∏–Ω—É—Ç)

                for number, take_date, owner_id, moderator_id, group_chat_id, tg_number in numbers:
                    try:
                        if take_date in ("0", "1"):
                            continue
                        start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                        time_elapsed = (current_time - start_time).total_seconds() / 60

                        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–¥
                        if time_elapsed >= timeout_minutes:
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥—å
                            cursor.execute('''
                                UPDATE numbers 
                                SET STATUS = 'queued',
                                    TAKE_DATE = '0',
                                    MODERATOR_ID = NULL,
                                    GROUP_CHAT_ID = NULL,
                                    VERIFICATION_CODE = NULL
                                WHERE NUMBER = ?
                            ''', (number,))
                            conn.commit()

                            print(f"[INFO] –ù–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")

                            # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ active_code_requests, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            if owner_id in active_code_requests and number in active_code_requests[owner_id]:
                                del active_code_requests[owner_id][number]
                                if not active_code_requests[owner_id]:
                                    del active_code_requests[owner_id]

                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
                            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                            try:
                                bot.send_message(
                                    owner_id,
                                    f"üì± –í–∞—à –Ω–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ {timeout_minutes} –º–∏–Ω—É—Ç.",
                                    reply_markup=markup,
                                    parse_mode='HTML'
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {e}")

                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                            if moderator_id:
                                markup_mod = types.InlineKeyboardMarkup()
                                markup_mod.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="get_number"))
                                markup_mod.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                                try:
                                    bot.send_message(
                                        moderator_id,
                                        f"üì± –ù–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ {timeout_minutes} –º–∏–Ω—É—Ç.",
                                        reply_markup=markup_mod,
                                        parse_mode='HTML'
                                    )
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_id}: {e}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ {number} –≤ check_number_timeout: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ check_number_timeout: {e}")
        sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

def check_number_hold_time():
    while True:
        try:
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT HOLD_TIME FROM settings')
                hold_time = cursor.fetchone()[0] or 5
                cursor.execute('SELECT NUMBER, TAKE_DATE, STATUS, ID_OWNER FROM numbers WHERE STATUS = "–∞–∫—Ç–∏–≤–µ–Ω" AND TAKE_DATE != "0"')
                numbers = cursor.fetchall()
                current_time = datetime.now()
                for number, take_date, status, owner_id in numbers:
                    try:
                        start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                        elapsed_minutes = (current_time - start_time).total_seconds() / 60
                        if elapsed_minutes >= hold_time:
                            shutdown_date = current_time.strftime("%Y-%m-%d %H:%M:%S")
                            cursor.execute('UPDATE numbers SET STATUS = "–æ—Ç—Å—Ç–æ—è–ª", SHUTDOWN_DATE = ? WHERE NUMBER = ?', 
                                          (shutdown_date, number))
                            cursor.execute('SELECT PRICE FROM settings')
                            price = cursor.fetchone()[0] or 2.0
                            db.update_balance(owner_id, price)
                            conn.commit()
                            logging.debug(f"–ù–æ–º–µ—Ä {number} –æ—Ç—Å—Ç–æ—è–ª, –Ω–∞—á–∏—Å–ª–µ–Ω–æ {price}$ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}")
                            bot.send_message(owner_id, f"‚úÖ –ù–æ–º–µ—Ä {number} –æ—Ç—Å—Ç–æ—è–ª {hold_time} –º–∏–Ω—É—Ç. –ù–∞—á–∏—Å–ª–µ–Ω–æ {price}$.")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                conn.commit()
                logging.debug(f"–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(numbers)} –Ω–æ–º–µ—Ä–æ–≤")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_number_hold_time: {e}")
        sleep(30)

# –ú–û–î–ï–†–ê–¶–ò–Ø –ù–û–ú–ï–†–û–í:


import schedule
import threading
import logging
from time import sleep

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.DEBUG, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

def clear_numbers_db():
    """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É numbers –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (CLEAR_TIME)."""
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            cursor.execute('SELECT COUNT(*) FROM numbers')
            total_numbers = cursor.fetchone()[0]
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã numbers
            cursor.execute('DELETE FROM numbers')
            conn.commit()
            
            logging.info(f"–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª–µ–Ω–æ {total_numbers} –Ω–æ–º–µ—Ä–æ–≤ –≤ {config.CLEAR_TIME}")
            print(f"[INFO] –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª–µ–Ω–æ {total_numbers} –Ω–æ–º–µ—Ä–æ–≤ –≤ {config.CLEAR_TIME}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã numbers: {e}")
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã numbers: {e}")

def schedule_clear_numbers():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã numbers –≤ CLEAR_TIME."""
    schedule.every().day.at(config.CLEAR_TIME).do(clear_numbers_db)
    while True:
        schedule.run_pending()
        sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤

@bot.callback_query_handler(func=lambda call: call.data == "get_number")
def get_number(call):
    user_id = call.from_user.id
    is_moderator = db_module.is_moderator(user_id)
    
    if not is_moderator:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä –∏ —Å—Ç–∞—Ç—É—Å –ê–§–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT n.ID, n.NUMBER, n.USER_ID, u.IS_AFK 
            FROM numbers n
            JOIN users u ON n.USER_ID = u.ID
            WHERE n.STATUS = 'pending'
            LIMIT 1
        ''')
        number_data = cursor.fetchone()
        
        if not number_data:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("-", callback_data="-"),
            )
            bot.edit_message_text(
                "–ó–∞—è–≤–∫–∏\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            return
        
        number_id, number, number_user_id, is_afk = number_data
        
        if is_afk:
            bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ê–§–ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("-", callback_data="-"),
            )
            bot.edit_message_text(
                f"–ó–∞—è–≤–∫–∏\n\n–ù–æ–º–µ—Ä {number} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ê–§–ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞ –Ω–∞ "–≤ —Ä–∞–±–æ—Ç–µ"
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute('UPDATE numbers SET STATUS = ?, MODERATOR_ID = ?, DATE_TAKEN = ? WHERE ID = ?',
                      ('in_progress', user_id, current_time, number_id))
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        bot.answer_callback_query(call.id, f"–í–∞—à –Ω–æ–º–µ—Ä: {number}")
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("-", callback_data="-"),
        )
        bot.edit_message_text(
            f"–ó–∞—è–≤–∫–∏\n\n–í–∞—à –Ω–æ–º–µ—Ä: {number}",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥", callback_data=f"confirm_code_{number_id}"))
            bot.send_message(number_user_id, f"–í–∞—à –Ω–æ–º–µ—Ä {number} –±—ã–ª –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=markup)
        except:
            pass

def get_number_in_group(user_id, chat_id, message_id, tg_number):
    if not db_module.is_moderator(user_id):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞!")
        return
    
    number = db_module.get_available_number(user_id)
    
    if number:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE numbers SET TAKE_DATE = ?, MODERATOR_ID = ?, GROUP_CHAT_ID = ?, TG_NUMBER = ? WHERE NUMBER = ?',
                          (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id, chat_id, tg_number, number))
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"send_code_{number}_{chat_id}_{tg_number}"),
            types.InlineKeyboardButton("‚ùå –ù–æ–º–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"invalid_{number}")
        )
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.send_message(
            chat_id,
            f"üì± <b>–¢–ì {tg_number}</b>\n"
            f"üì± –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>{number}</code>\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
            parse_mode='HTML',
            reply_markup=markup,
            reply_to_message_id=message_id
        )
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(
            chat_id,
            f"üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¢–ì {tg_number}).",
            parse_mode='HTML',
            reply_markup=markup,
            reply_to_message_id=message_id
        )

confirmation_messages = {}
active_code_requests = {}

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("send_code_"))
def send_verification_code(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        number = parts[2]
        group_chat_id = int(parts[3])
        tg_number = int(parts[4]) if len(parts) > 4 else 1
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            owner = cursor.fetchone()
        
        if owner:
            owner_id = owner[0]
            try:
                # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ
                inline_markup = types.InlineKeyboardMarkup()
                inline_markup.add(types.InlineKeyboardButton(
                    "üö´ –ù–µ –≤–∞–ª–∏–¥",
                    callback_data=f"mark_invalid_{number}"
                ))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å inline-–∫–Ω–æ–øan's–∫–æ–π
                msg = bot.send_message(
                    owner_id,
                    "=================\n"
                    f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
                    f"–ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥, –ø–æ–º–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π:",
                    reply_markup=inline_markup,
                    parse_mode='HTML'
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–µ –≤–∞–ª–∏–¥"
                text = (
                    f"üì± <b>–¢–ì {tg_number}</b>\n"
                    f"üì± –ù–æ–º–µ—Ä: {number}\n‚úâÔ∏è –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É."
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚ùå –ù–µ –≤–∞–ª–∏–¥", callback_data=f"mark_invalid_{number}"))
                
                bot.edit_message_text(
                    text,
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                with db.get_db() as conn:
                    cursor = conn.cursor()
                    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    cursor.execute('''
                        UPDATE numbers 
                        SET VERIFICATION_CODE = "", 
                            TG_NUMBER = ?, 
                            MODERATOR_ID = ?, 
                            GROUP_CHAT_ID = ?, 
                            TAKE_DATE = ?, 
                            STATUS = ? 
                        WHERE NUMBER = ?
                    ''', (tg_number, call.from_user.id, group_chat_id, current_date, 'in_use', number))
                    conn.commit()
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ —Å message_id
                if owner_id not in active_code_requests:
                    active_code_requests[owner_id] = {}
                active_code_requests[owner_id][number] = {
                    'message_id': msg.message_id,
                    'moderator_id': call.from_user.id,
                    'group_chat_id': group_chat_id,
                    'tg_number': tg_number,
                    'request_time': datetime.now()
                }
                
                bot.register_next_step_handler(
                    msg,
                    process_verification_code_input,
                    number,
                    call.from_user.id,
                    group_chat_id,
                    msg.chat.id,
                    msg.message_id,
                    tg_number
                )
            except telebot.apihelper.ApiTelegramException as e:
                if e.error_code == 403 and "user is deactivated" in e.description:
                    bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                    with db.get_db() as conn:
                        cursor = conn.cursor()
                        cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
                        conn.commit()
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ active_code_requests
                    if owner_id in active_code_requests and number in active_code_requests[owner_id]:
                        del active_code_requests[owner_id][number]
                        if not active_code_requests[owner_id]:
                            del active_code_requests[owner_id]
                else:
                    raise e
        else:
            bot.answer_callback_query(call.id, "‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_verification_code: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_invalid_"))
def mark_invalid(call):
    try:
        number = call.data.split("_")[2]
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER, MODERATOR_ID, GROUP_CHAT_ID FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            owner_id, moderator_id, group_chat_id = result
            
            # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ –±–∞–∑—ã
            cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
            conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ active_code_requests
        owner_message_id = None
        if owner_id in active_code_requests and number in active_code_requests[owner_id]:
            owner_message_id = active_code_requests[owner_id][number].get('message_id')
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ active_code_requests
            del active_code_requests[owner_id][number]
            if not active_code_requests[owner_id]:
                del active_code_requests[owner_id]
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if owner_message_id:
            try:
                bot.delete_message(owner_id, owner_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        owner_markup = types.InlineKeyboardMarkup()
        owner_markup.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
        owner_markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.send_message(
                owner_id,
                f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏ —É–¥–∞–ª—ë–Ω.\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ. ",
                reply_markup=owner_markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(
            f"‚úÖ –ù–æ–º–µ—Ä {number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in config.ADMINS_ID:
            try:
                bot.send_message(
                    admin_id,
                    f"‚ùå –ù–æ–º–µ—Ä {number} –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏ —É–¥–∞–ª—ë–Ω."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
        
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω!")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ mark_invalid: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞!")

def process_verification_code_input(message, number, moderator_id, group_chat_id, owner_chat_id, owner_message_id, tg_number):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–ª–∞–µ–º
        if not message.reply_to_message:
            error_msg = bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–¥–∞ (—Ä–µ–ø–ª–∞–µ–º)!")
            threading.Timer(2.0, lambda: bot.delete_message(error_msg.chat.id, error_msg.message_id)).start()
            bot.register_next_step_handler(
                message,
                process_verification_code_input,
                number,
                moderator_id,
                group_chat_id,
                owner_chat_id,
                owner_message_id,
                tg_number
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫ –∫–∞–∫–æ–º—É –Ω–æ–º–µ—Ä—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ä–µ–ø–ª–∞–π
        owner_id = message.from_user.id
        replied_message_id = message.reply_to_message.message_id
        found_number = None

        # –ò—â–µ–º –Ω–æ–º–µ—Ä, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å replied_message_id
        if owner_id in active_code_requests:
            for num, data in list(active_code_requests[owner_id].items()):
                if data['message_id'] == replied_message_id:
                    found_number = num
                    number = num
                    moderator_id = data['moderator_id']
                    group_chat_id = data['group_chat_id']
                    tg_number = data['tg_number']
                    del active_code_requests[owner_id][num]
                    if not active_code_requests[owner_id]:
                        del active_code_requests[owner_id]
                    break

        if not found_number:
            threading.Timer(15.0, lambda: bot.delete_message(error_msg.chat.id, error_msg.message_id)).start()
            bot.register_next_step_handler(
                message,
                process_verification_code_input,
                number,
                moderator_id,
                group_chat_id,
                owner_chat_id,
                owner_message_id,
                tg_number
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.send_message(
                    owner_chat_id,
                    f"‚ùå –ù–æ–º–µ—Ä {number} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π).\nüì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä.",
                    reply_markup=markup
                )
                try:
                    bot.delete_message(owner_chat_id, owner_message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_chat_id}: {e}")
                return

        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        code = message.text.strip()
        if not code:
            error_msg = bot.reply_to(message, "‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥.")
            threading.Timer(15.0, lambda: bot.delete_message(error_msg.chat.id, error_msg.message_id)).start()
            bot.register_next_step_handler(
                message,
                process_verification_code_input,
                number,
                moderator_id,
                group_chat_id,
                owner_chat_id,
                owner_message_id,
                tg_number
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE numbers SET VERIFICATION_CODE = ? WHERE NUMBER = ?',
                (code, number)
            )
            conn.commit()

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –≤–ª–∞–¥–µ–ª—å—Ü–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –∫–æ–¥
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –≤–µ—Ä–Ω—ã–π", callback_data=f"confirm_code_correct_{number}_{group_chat_id}_{tg_number}_{code}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"change_code_{number}_{group_chat_id}_{tg_number}")
        )
        markup.add(types.InlineKeyboardButton("üö´ –ù–µ –≤–∞–ª–∏–¥", callback_data=f"mark_invalid_{number}"))
        bot.send_message(
            owner_chat_id,
            f"üì± –ù–æ–º–µ—Ä: {number}\n"
            f"–ö–æ–¥: {code}\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥—ë–Ω –∫–æ–¥?",
            reply_markup=markup,
            parse_mode='HTML'
        )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–¥–∞
        try:
            bot.delete_message(owner_chat_id, owner_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_chat_id}: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_verification_code_input: {e}")
        error_msg = bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        threading.Timer(15.0, lambda: bot.delete_message(error_msg.chat.id, error_msg.message_id)).start()

#–ù–£–ñ–ù–ï–ï–ï

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_code_correct_"))
def confirm_code_correct(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 6:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        number = parts[3]
        group_chat_id = int(parts[4])
        tg_number = int(parts[5])
        code = "_".join(parts[6:])  # –ö–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É —Å–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏

        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT MODERATOR_ID, GROUP_CHAT_ID, ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            moderator_id, stored_chat_id, owner_id = result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ stored_chat_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å group_chat_id –∏–∑ callback
        if stored_chat_id != group_chat_id:
            print(f"[DEBUG] –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ GROUP_CHAT_ID: stored_chat_id={stored_chat_id}, group_chat_id={group_chat_id}")
            stored_chat_id = group_chat_id
            cursor.execute('UPDATE numbers SET GROUP_CHAT_ID = ? WHERE NUMBER = ?', (group_chat_id, number))
            conn.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        try:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.edit_message_text(
                f"‚úÖ –ö–æ–¥ '{code}' –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} (–¢–ì {tg_number}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return

        bot.answer_callback_query(call.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –≤ –≥—Ä—É–ø–ø—É
        if moderator_id:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úÖ –î–∞, –≤—Å—Ç–∞–ª", callback_data=f"number_active_{number}_{tg_number}"),
                types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"number_invalid_{number}_{tg_number}")
            )
            try:
                bot.send_message(
                    group_chat_id,
                    f"üì± <b>–¢–ì {tg_number}</b>\n"
                    f"üì± –ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É {number}\n–ö–æ–¥: {code}\n\n–í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
            except telebot.apihelper.ApiTelegramException as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group_chat_id}: {e}")
                try:
                    bot.send_message(
                        moderator_id,
                        f"üì± <b>–¢–ì {tg_number}</b>\n"
                        f"üì± –ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É {number}\n–ö–æ–¥: {code}\n\n–í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?\n"
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (ID: {group_chat_id}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ.",
                        reply_markup=markup,
                        parse_mode='HTML'
                    )
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}: {e}")
                    for admin_id in config.ADMINS_ID:
                        try:
                            bot.send_message(
                                admin_id,
                                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}. "
                                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ {group_chat_id} –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
                                parse_mode='HTML'
                            )
                        except:
                            continue

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ confirm_code_correct: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_code_"))
def confirm_code(call):
    try:    
        parts = call.data.split("_")
        if len(parts) < 5:  # –£–º–µ–Ω—å—à–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —É–±—Ä–∞–ª–∏ chat_id –∏ message_id
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        number = parts[2]
        code = parts[3]
        group_chat_id = int(parts[4])
        tg_number = int(parts[5])
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT MODERATOR_ID, GROUP_CHAT_ID, ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            moderator_id, stored_chat_id, owner_id = result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ stored_chat_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å group_chat_id –∏–∑ callback
        if stored_chat_id != group_chat_id:
            print(f"[DEBUG] –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ GROUP_CHAT_ID: stored_chat_id={stored_chat_id}, group_chat_id={group_chat_id}")
            stored_chat_id = group_chat_id
            cursor.execute('UPDATE numbers SET GROUP_CHAT_ID = ? WHERE NUMBER = ?', (group_chat_id, number))
            conn.commit()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_key = f"{number}_{owner_id}"
        if confirmation_key not in confirmation_messages:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        confirmation_data = confirmation_messages[confirmation_key]
        confirmation_chat_id = confirmation_data["chat_id"]
        confirmation_message_id = confirmation_data["message_id"]

        try:    
            bot.edit_message_text(
                f"‚úÖ –ö–æ–¥ '{code}' –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} (–¢–ì {tg_number}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.",
                confirmation_chat_id,
                confirmation_message_id,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del confirmation_messages[confirmation_key]

        bot.answer_callback_query(call.id)
        
        if moderator_id:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úÖ –î–∞, –≤—Å—Ç–∞–ª", callback_data=f"number_active_{number}_{tg_number}"),
                types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"number_invalid_{number}_{tg_number}")
            )
            try:
                bot.send_message(
                    group_chat_id,
                    f"üì± <b>–¢–ì {tg_number}</b>\n"
                    f"üì± –ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É {number}\n–ö–æ–¥: {code}\n\n–í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
            except telebot.apihelper.ApiTelegramException as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group_chat_id}: {e}")
                try:
                    bot.send_message(
                        moderator_id,
                        f"üì± <b>–¢–ì {tg_number}</b>\n"
                        f"üì± –ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É {number}\n–ö–æ–¥: {code}\n\n–í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?\n"
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (ID: {group_chat_id}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ.",
                        reply_markup=markup,
                        parse_mode='HTML'
                    )
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}: {e}")
                    for admin_id in config.ADMINS_ID:
                        try:
                            bot.send_message(
                                admin_id,
                                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}. "
                                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ {group_chat_id} –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
                                parse_mode='HTML'
                            )
                        except:
                            continue
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ confirm_code: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("change_code_"))
def change_code(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        number = parts[2]
        group_chat_id = int(parts[3])
        tg_number = int(parts[4])
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            moderator_id = result[0] if result else call.from_user.id

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –∫–æ–¥–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        markup = types.ReplyKeyboardRemove()
        msg = bot.send_message(
            call.from_user.id,
            "=================\n"
            f"üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)",
            reply_markup=markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º active_code_requests —Å –Ω–æ–≤—ã–º message_id
        owner_id = call.from_user.id
        if owner_id not in active_code_requests:
            active_code_requests[owner_id] = {}
        active_code_requests[owner_id][number] = {
            'message_id': msg.message_id,
            'moderator_id': moderator_id,
            'group_chat_id': group_chat_id,
            'tg_number': tg_number,
            'request_time': datetime.now()
        }
        
        bot.register_next_step_handler(
            msg,
            process_verification_code_input,
            number,
            moderator_id,
            group_chat_id,
            msg.chat.id,
            msg.message_id,
            tg_number
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ change_code: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞!")

def create_back_to_main_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    return markup

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤

@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_confirm_"))
def moderator_confirm_number(call):
    number = call.data.split("_")[2]
    user_id = call.from_user.id
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE numbers SET STATUS = "–∞–∫—Ç–∏–≤–µ–Ω", MODERATOR_ID = NULL, CONFIRMED_BY_MODERATOR_ID = ?, TAKE_DATE = ? WHERE NUMBER = ?', 
                      (user_id, current_date, number))
        cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
        owner = cursor.fetchone()
        conn.commit()
        print(f"[DEBUG] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –Ω–æ–º–µ—Ä: {number}, CONFIRMED_BY_MODERATOR_ID = {user_id}, TAKE_DATE = {current_date}")
    
    if owner:
        markup_owner = types.InlineKeyboardMarkup()
        markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(owner[0], 
                        f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —Å–ª–µ—Ç–∏—Ç.",
                        reply_markup=markup_owner, parse_mode='HTML')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìã –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="moderator_numbers"))
    bot.edit_message_text(
        f"üì± –ù–æ–º–µ—Ä {number} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —Å–ª–µ—Ç–∏—Ç.\n–ù–∞–∂–º–∏—Ç–µ '–ú–æ–∏ –Ω–æ–º–µ—Ä–∞' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.",
        call.message.chat.id, 
        call.message.message_id, 
        reply_markup=markup, 
        parse_mode='HTML'
    )
    
    # –í—ã–∑—ã–≤–∞–µ–º handle_moderator_numbers –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    try:
        new_call = types.CallbackQuery(
            id=call.id,
            from_user=call.from_user,
            message=call.message,
            chat_instance=call.chat_instance,
            data="moderator_numbers"
        )
        handle_moderator_numbers(new_call)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_reject_"))
def handle_number_rejection(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
        owner = cursor.fetchone()
        cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
        conn.commit()

        if owner:
            markup_owner = types.InlineKeyboardMarkup()
            markup_owner.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"))
            markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.send_message(owner[0], 
                               f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", 
                               reply_markup=markup_owner)
            except:
                pass

    markup_mod = types.InlineKeyboardMarkup()
    markup_mod.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
    markup_mod.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.edit_message_text(f"üì± –ù–æ–º–µ—Ä {number} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n‚ùå –ù–æ–º–µ—Ä –Ω–µ –≤—Å—Ç–∞–ª.", 
                         call.message.chat.id, 
                         call.message.message_id, 
                         reply_markup=markup_mod)

@bot.callback_query_handler(func=lambda call: call.data.startswith("number_active_"))
def number_active(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        number = parts[2]
        tg_number = int(parts[3])
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            owner = cursor.fetchone()
            cursor.execute('UPDATE numbers SET STATUS = ?, CONFIRMED_BY_MODERATOR_ID = ? WHERE NUMBER = ?', 
                          ('–∞–∫—Ç–∏–≤–µ–Ω', call.from_user.id, number))
            conn.commit()
        
        if owner:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(
                owner[0],
                f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω.\n‚è≥ –û—Ç—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª—Å—è.",
                reply_markup=markup,
                parse_mode='HTML'
            )
        

        bot.edit_message_text(
            f"üì± <b>–¢–ì {tg_number}</b>\n"
            f"‚úÖ –ù–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
        )
        bot.answer_callback_query(call.id)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ number_active: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("invalid_"))
def handle_invalid_number(call):
    try:
        number = call.data.split("_")[1]
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER, GROUP_CHAT_ID FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            owner_id, group_chat_id = result
            
            # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
            conn.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
        group_message = (
            f"‚ùå –ù–æ–º–µ—Ä {number} –±—ã–ª –ø–æ–º–µ—á–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        if group_chat_id:
            try:
                bot.send_message(
                    group_chat_id,
                    group_message,
                    parse_mode='HTML'
                )
            except telebot.apihelper.ApiTelegramException as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group_chat_id}: {e}")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
                for admin_id in config.ADMINS_ID:
                    try:
                        bot.send_message(
                            admin_id,
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ {number} –≤ –≥—Ä—É–ø–ø—É {group_chat_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ.",
                            parse_mode='HTML'
                        )
                    except:
                        continue

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot.edit_message_text(
            f"‚úÖ –ù–æ–º–µ—Ä {number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML'
        )

        bot.answer_callback_query(call.id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_invalid_number: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("number_failed_"))
def handle_number_failed(call):
    number = call.data.split("_")[2]
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT TAKE_DATE, ID_OWNER, CONFIRMED_BY_MODERATOR_ID, STATUS FROM numbers WHERE NUMBER = ?', (number,))
            data = cursor.fetchone()
            if not data:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            take_date, owner_id, confirmed_by_moderator_id, status = data
            
            if status == "–æ—Ç—Å—Ç–æ—è–ª":
                bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä —É–∂–µ –æ—Ç—Å—Ç–æ—è–ª —Å–≤–æ—ë –≤—Ä–µ–º—è!")
                return

            cursor.execute('SELECT HOLD_TIME FROM settings')
            result = cursor.fetchone()
            hold_time = result[0] if result else 5
            
            end_time = datetime.now()
            if take_date in ("0", "1"):
                work_time = 0
                worked_enough = False
            else:
                start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                work_time = (end_time - start_time).total_seconds() / 60
                worked_enough = work_time >= hold_time
            
            shutdown_date = end_time.strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('UPDATE numbers SET SHUTDOWN_DATE = ?, STATUS = "—Å–ª–µ—Ç–µ–ª" WHERE NUMBER = ?', 
                          (shutdown_date, number))
            conn.commit()
        
        mod_message = (
            f"üì± –ù–æ–º–µ—Ä: {number}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: —Å–ª–µ—Ç–µ–ª\n"
        )
        if take_date not in ("0", "1"):
            mod_message += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        mod_message += f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        if not worked_enough:
            mod_message += f"‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ({hold_time} –º–∏–Ω—É—Ç)!\n"
        mod_message += f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç"
        
        owner_message = (
            f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª.\n"
            f"üì± –ù–æ–º–µ—Ä: {number}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: —Å–ª–µ—Ç–µ–ª\n"
        )
        if take_date not in ("0", "1"):
            owner_message += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        owner_message += f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        if not worked_enough:
            owner_message += f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç"
        
        bot.send_message(owner_id, owner_message, parse_mode='HTML')
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderator_numbers"))
        bot.edit_message_text(mod_message, 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup,
                            parse_mode='HTML')
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_number_failed: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("return_to_queue_"))
def handle_return_to_queue(call):
    user_id = call.from_user.id
    number = call.data.split("_")[3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ callback_data
    
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–æ–º–µ—Ä–∞
            cursor.execute('SELECT ID_OWNER, MODERATOR_ID, GROUP_CHAT_ID FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            owner_id, moderator_id, group_chat_id = result
            if owner_id != user_id:
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ê–§–ö –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if db_module.get_afk_status(user_id):
                bot.answer_callback_query(call.id, "‚ùå –í—ã –≤ —Ä–µ–∂–∏–º–µ –ê–§–ö! –û—Ç–∫–ª—é—á–∏—Ç–µ –ê–§–ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π.")
                return
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥—å
            cursor.execute('''
                UPDATE numbers 
                SET STATUS = ?, 
                    TAKE_DATE = "0", 
                    MODERATOR_ID = NULL, 
                    GROUP_CHAT_ID = NULL, 
                    VERIFICATION_CODE = NULL 
                WHERE NUMBER = ?
            ''', ('queued', number))
            conn.commit()
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ active_code_requests
        if owner_id in active_code_requests and number in active_code_requests[owner_id]:
            del active_code_requests[owner_id][number]
            if not active_code_requests[owner_id]:
                del active_code_requests[owner_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"üì± –ù–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω —Å–≤—è–∑–∞–Ω —Å –∑–∞–ø—Ä–æ—Å–æ–º
        if moderator_id:
            try:
                bot.send_message(
                    moderator_id,
                    f"üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª –Ω–æ–º–µ—Ä {number} –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.",
                    parse_mode='HTML'
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_id}: {e}")
        
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª –Ω–æ–º–µ—Ä {number} –≤ –æ—á–µ—Ä–µ–¥—å")
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å!")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_return_to_queue: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–æ–º–µ—Ä–∞!")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–¥–∞
active_code_requests = {}

#–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–º–µ—Ä–æ–≤:
@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_numbers"))
def handle_moderator_numbers(call):
    user_id = call.from_user.id
    page = int(call.data.split("_")[2]) if call.data.startswith("moderator_numbers_") else 1
    items_per_page = 5
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º GROUP_CHAT_ID –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        cursor.execute('''
            SELECT GROUP_CHAT_ID 
            FROM numbers 
            WHERE MODERATOR_ID = ? OR CONFIRMED_BY_MODERATOR_ID = ? 
            LIMIT 1
        ''', (user_id, user_id))
        group_chat_id = cursor.fetchone()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        group_name = "–≥–∏–≥–∞—á–∞–¥"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if group_chat_id and group_chat_id[0]:
            group_name = db.get_group_name(group_chat_id[0]) or group_name
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ —Å–ª–µ—Ç—ã
        cursor.execute('''
            SELECT COUNT(*) 
            FROM numbers 
            WHERE (MODERATOR_ID = ? OR CONFIRMED_BY_MODERATOR_ID = ?) 
            AND STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
        ''', (user_id, user_id))
        successful_numbers = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT COUNT(*) 
            FROM numbers 
            WHERE (MODERATOR_ID = ? OR CONFIRMED_BY_MODERATOR_ID = ?) 
            AND STATUS = '—Å–ª–µ—Ç–µ–ª'
        ''', (user_id, user_id))
        failed_numbers = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        cursor.execute('''
            SELECT COUNT(*) 
            FROM numbers 
            WHERE MODERATOR_ID = ? OR CONFIRMED_BY_MODERATOR_ID = ?
        ''', (user_id, user_id))
        total_numbers = cursor.fetchone()[0]
        total_pages = (total_numbers + items_per_page - 1) // items_per_page
        
        page = max(1, min(page, total_pages or 1))
        offset = (page - 1) * items_per_page
        cursor.execute('''
            SELECT NUMBER, STATUS, TAKE_DATE, SHUTDOWN_DATE, MODERATOR_ID, CONFIRMED_BY_MODERATOR_ID
            FROM numbers
            WHERE MODERATOR_ID = ? OR CONFIRMED_BY_MODERATOR_ID = ?
            ORDER BY TAKE_DATE DESC
            LIMIT ? OFFSET ?
        ''', (user_id, user_id, items_per_page, offset))
        numbers = cursor.fetchall()
    
    if not numbers:
        text = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤."
        markup = types.InlineKeyboardMarkup()
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–æ–≤
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="moderator_panel"))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        logging.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    text = (
        f"–≥—Ä—É–ø–ø–∞: {group_name}\n"
        f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_numbers}\n"
        f"–°–ª–µ—Ç—ã: {failed_numbers}\n\n"
        f"<b>üìã –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    )
    markup = types.InlineKeyboardMarkup()
    for number, status, take_date, shutdown_date, moderator_id, confirmed_by in numbers:
        status_emoji = "üü¢" if status == "–æ—Ç—Å—Ç–æ—è–ª" else "üî¥" if status == "—Å–ª–µ—Ç–µ–ª" else "‚ö™" if status == "–∞–∫—Ç–∏–≤–µ–Ω" else "‚ùì"
        text += f"{status_emoji} <code>{number}</code> | {status}\n"
        if take_date not in ("0", "1"):
            text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        if shutdown_date != "0":
            text += f"{'üü¢ –û—Ç—Å—Ç–æ—è–ª' if status == '–æ—Ç—Å—Ç–æ—è–ª' else 'üî¥ –°–ª–µ—Ç–µ–ª'}: {shutdown_date}\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö)"
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –≤ handle_moderator_numbers, –¥–ª–∏–Ω–∞: {len(text)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"moderator_numbers_{page-1}"))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"moderator_numbers_{page+1}"))
    if nav_buttons:
        markup.row(*nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="moderator_panel"))
    
    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {page}/{total_pages} —Å {len(numbers)} –Ω–æ–º–µ—Ä–∞–º–∏, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)}")
    except telebot.apihelper.ApiTelegramException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ handle_moderator_numbers: {e}")
        if "MESSAGE_TOO_LONG" in str(e):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö!")
        else:
            bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

def view_active_number(call):
    number = call.data.split("_")[3]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT TAKE_DATE FROM numbers WHERE NUMBER = ?', (number,))
        take_date = cursor.fetchone()[0]
    
    text = (
        f"üì≤ –ù–æ–º–µ—Ä: {number}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω\n"
        f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–æ–º–µ—Ä–∞", callback_data="moderator_numbers"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_failed_number_"))
def view_failed_number(call):
    number = call.data.split("_")[3]
    user_id = call.from_user.id
    is_moderator = db.is_moderator(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE FROM numbers WHERE NUMBER = ?', (number,))
        data = cursor.fetchone()
    
    if not data:
        bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    status, take_date, shutdown_date = data
    text = (
        f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    back_callback = "my_numbers" if not is_moderator else "moderator_numbers"
    markup.add(types.InlineKeyboardButton("üîô –í –Ω–æ–º–µ—Ä–∞", callback_data=back_callback))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_stood_number_"))
def view_stood_number(call):
    number = call.data.split("_")[3]
    user_id = call.from_user.id
    is_moderator = db.is_moderator(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE FROM numbers WHERE NUMBER = ?', (number,))
        data = cursor.fetchone()
    
    if not data:
        bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    status, take_date, shutdown_date = data
    text = (
        f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        f"üü¢ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date}\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    back_callback = "my_numbers" if not is_moderator else "moderator_numbers"
    markup.add(types.InlineKeyboardButton("üîô –í –Ω–æ–º–µ—Ä–∞", callback_data=back_callback))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_number_details_"))
def view_number_details(call):
    number = call.data.split("_")[3]
    user_id = call.from_user.id
    is_moderator = db.is_moderator(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE, MODERATOR_ID, CONFIRMED_BY_MODERATOR_ID, TG_NUMBER FROM numbers WHERE NUMBER = ?', (number,))
        data = cursor.fetchone()
    
    if not data:
        bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    status, take_date, shutdown_date, moderator_id, confirmed_by_moderator_id, tg_number = data
    text = (
        f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
    )
    if take_date not in ("0", "1"):
        text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
    if shutdown_date and shutdown_date != "0":
        text += f"{'üü¢ –û—Ç—Å—Ç–æ—è–ª' if status == '–æ—Ç—Å—Ç–æ—è–ª' else 'üî¥ –°–ª–µ—Ç–µ–ª'}: {shutdown_date}\n"
    
    markup = types.InlineKeyboardMarkup()
    back_callback = "my_numbers" if not is_moderator else "moderator_numbers"
    markup.add(types.InlineKeyboardButton("üîô –í –Ω–æ–º–µ—Ä–∞", callback_data=back_callback))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)



@bot.message_handler(regexp='—Å–ª–µ—Ç')
def handle_slet_command(message):
    user_id = message.from_user.id
    
    if not db.is_moderator(user_id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "—Å–ª–µ—Ç"
    try:
        input_number = message.text.split(maxsplit=1)[1].strip()
    except IndexError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: —Å–ª–µ—Ç +79991234567")
        return
    
    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–∞ +
    cleaned_number = re.sub(r'[^0-9+]', '', input_number)
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (+7xxxxxxxxxx)
    if cleaned_number.startswith('+8') or cleaned_number.startswith('8'):
        cleaned_number = '+7' + cleaned_number[2:] if cleaned_number.startswith('+8') else '+7' + cleaned_number[1:]
    elif cleaned_number.startswith('7'):
        cleaned_number = '+7' + cleaned_number[1:]
    elif not cleaned_number.startswith('+'):
        cleaned_number = '+7' + cleaned_number
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É +7 –∏ 10 —Ü–∏—Ñ—Ä
    if not re.match(r'^\+7\d{10}$', cleaned_number):
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –ü—Ä–∏–º–µ—Ä: —Å–ª–µ—Ç +79991234567")
        return

    # –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db.get_db() as conn:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –±–∞–∑—ã
        cursor.execute('SELECT NUMBER, TAKE_DATE, ID_OWNER, CONFIRMED_BY_MODERATOR_ID, STATUS FROM numbers')
        all_numbers = cursor.fetchall()
        
        found_number = None
        for number_data in all_numbers:
            db_number = number_data[0]
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –±–∞–∑—ã –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–∞ +
            cleaned_db_number = re.sub(r'[^0-9+]', '', db_number)
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            if cleaned_number == cleaned_db_number:
                found_number = number_data
                break
        
        if not found_number:
            bot.reply_to(message, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        number, take_date, owner_id, confirmed_by_moderator_id, status = found_number
        
        if confirmed_by_moderator_id != user_id:
            bot.reply_to(message, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ—Ç–∏—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π!")
            return
        
        if status == "–æ—Ç—Å—Ç–æ—è–ª":
            bot.reply_to(message, "‚úÖ –ù–æ–º–µ—Ä —É–∂–µ –æ—Ç—Å—Ç–æ—è–ª!")
            return
        
        cursor.execute('SELECT HOLD_TIME FROM settings')
        hold_time = cursor.fetchone()[0] or 5
        
        end_time = datetime.now()
        if take_date in ("0", "1"):
            work_time = 0
            worked_enough = False
        else:
            start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
            work_time = (end_time - start_time).total_seconds() / 60
            worked_enough = work_time >= hold_time
        
        if worked_enough:
            bot.reply_to(message, f"‚úÖ –ù–æ–º–µ—Ä {number} –æ—Ç—Å—Ç–æ—è–ª {hold_time} –º–∏–Ω—É—Ç!")
            return
        
        shutdown_date = end_time.strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute('UPDATE numbers SET SHUTDOWN_DATE = ?, STATUS = "—Å–ª–µ—Ç–µ–ª" WHERE NUMBER = ?', 
                      (shutdown_date, number))
        conn.commit()
        logging.debug(f"–ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–ª, SHUTDOWN_DATE={shutdown_date}, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä={user_id}")
    
    mod_message = (
        f"üì± <code>{number}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: —Å–ª–µ—Ç–µ–ª\n"
        f"üü¢ –í—Å—Ç–∞–ª: {take_date if take_date not in ('0', '1') else 'N/A'}\n"
        f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        f"‚è≥ –í—Ä–µ–º—è: {work_time:.2f} –º–∏–Ω"
    )
    
    owner_message = (
        f"‚ùå –ù–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª.\n"
        f"üì± <code>{number}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: —Å–ª–µ—Ç–µ–ª\n"
        f"üü¢ –í—Å—Ç–∞–ª: {take_date if take_date not in ('0', '1') else 'N/A'}\n"
        f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        f"‚è≥ –í—Ä–µ–º—è: {work_time:.2f} –º–∏–Ω"
    )
    
    try:
        bot.send_message(owner_id, owner_message, parse_mode='HTML')
        logging.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id} –æ —Å–ª–µ—Ç–µ {number}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")
    
    bot.reply_to(message, mod_message, parse_mode='HTML')

def confirm_number(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE numbers SET CONFIRMED_BY_MODERATOR_ID = ? WHERE NUMBER = ?', (call.from_user.id, number))
        conn.commit()
        print(f"Confirmed number {number} with moderator_id {call.from_user.id}")  # –û—Ç–ª–∞–¥–∫–∞
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT NUMBER, STATUS, TAKE_DATE, SHUTDOWN_DATE, CONFIRMED_BY_MODERATOR_ID, MODERATOR_ID FROM numbers WHERE MODERATOR_ID = ? OR CONFIRMED_BY_MODERATOR_ID = ?', (call.from_user.id, call.from_user.id))
        numbers = cursor.fetchall()
        print("Updated numbers after confirmation:", numbers)  # –û—Ç–ª–∞–¥–∫–∞
    
    text = "üìã <b>–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
    markup = types.InlineKeyboardMarkup()
    for number, status, take_date, shutdown_date, confirmed_by, moderator_id in numbers:
        if confirmed_by and confirmed_by != 0 and not shutdown_date:
            markup.add(types.InlineKeyboardButton(f"‚ö™{number}", callback_data=f"view_active_number_{number}"))
        elif status == "–æ—Ç—Å—Ç–æ—è–ª":
            markup.add(types.InlineKeyboardButton(f"üü¢ {number}", callback_data=f"view_stood_number_{number}"))
        elif shutdown_date and shutdown_date != "0":
            markup.add(types.InlineKeyboardButton(f"üî¥ {number}", callback_data=f"view_failed_number_{number}"))
        elif moderator_id == call.from_user.id and (not confirmed_by or confirmed_by == 0):
            markup.add(types.InlineKeyboardButton(f"‚è≥{number}", callback_data=f"confirm_number_{number}"))
    
    markup.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="get_number"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
    bot.answer_callback_query(call.id, f"‚úÖ –ù–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_number_"))
def show_number_details(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE, MODERATOR_ID, CONFIRMED_BY_MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
        data = cursor.fetchone()

    if data:
        status, take_date, shutdown_date, moderator_id, confirmed_by_moderator_id = data
        text = (f"üì± <b>–°—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞:</b> {status}\n"
                f"üì± <b>–ù–æ–º–µ—Ä:</b> {number}\n")
        if take_date not in ("0", "1"):
            text += f"üü¢ <b>–í—Å—Ç–∞–ª:</b> {take_date}\n"
        if shutdown_date != "0":
            if status == "–æ—Ç—Å—Ç–æ—è–ª":
                text += f"üü¢ <b>–û—Ç—Å—Ç–æ—è–ª:</b> {shutdown_date}\n"
            else:
                text += f"‚ùå <b>–°–ª–µ—Ç–µ–ª:</b> {shutdown_date}\n"

        markup = types.InlineKeyboardMarkup()
        if shutdown_date == "0" and (moderator_id == call.from_user.id or confirmed_by_moderator_id == call.from_user.id):
            markup.add(types.InlineKeyboardButton("üî¥ –°–ª–µ—Ç–µ–ª", callback_data=f"number_failed_{number}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderator_numbers"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(text, 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup,
                            parse_mode='HTML')
        




























with db_module.get_db() as conn:
    cursor = conn.cursor()
    try:
        cursor.execute('ALTER TABLE users ADD COLUMN LAST_ACTIVITY TEXT')
        conn.commit()
        print("–°—Ç–æ–ª–±–µ—Ü LAST_ACTIVITY –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
    except sqlite3.OperationalError:
        # –°—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        pass





def update_user_activity(user_id):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET LAST_ACTIVITY = ? WHERE ID = ?', (current_time, user_id))
        conn.commit()

from time import sleep

last_activity = {}


#–ö–û–î –î–õ–Ø –†–ï–ê–ì–ò–†–û–í–ê–ù–ò–ô –ù–£ –Ω—É –¢–≥ —Ç–≥
@bot.message_handler(content_types=['text'], func=lambda message: message.chat.type in ['group', 'supergroup'])
def handle_group_commands(message):
    user_id = message.from_user.id
    update_user_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    chat_id = message.chat.id
    text = message.text.lower().strip()

    if chat_id not in config.GROUP_IDS:
        return

    tg_pattern = r'^—Ç–≥(\d{1,2})$'
    match = re.match(tg_pattern, text)
    if match:
        tg_number = int(match.group(1))
        if 1 <= tg_number <= 70:
            get_number_in_group(user_id, chat_id, message.message_id, tg_number)
            




# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–¥–æ–≤ –ø–æ user_id
active_code_requests = {}
@bot.callback_query_handler(func=lambda call: call.data.startswith("code_entered_"))
def confirm_verification_code(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE numbers SET VERIFICATION_CODE = NULL WHERE NUMBER = ?', (number,))
        cursor.execute('SELECT MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
        moderator_id = cursor.fetchone()[0]
        conn.commit()

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.edit_message_text(f"‚úÖ –ö–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}  –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.", 
                         call.message.chat.id, 
                         call.message.message_id, 
                         reply_markup=markup)

    if moderator_id:
        markup_mod = types.InlineKeyboardMarkup()
        markup_mod.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"moderator_confirm_{number}"),
            types.InlineKeyboardButton("‚ùå –ù–µ –≤—Å—Ç–∞–ª", callback_data=f"moderator_reject_{number}")
        )
        try:
            bot.send_message(moderator_id, 
                           f"üì± –ù–æ–º–µ—Ä {number} –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ.", 
                           reply_markup=markup_mod)
        except:
            pass

@bot.callback_query_handler(func=lambda call: call.data.startswith("code_error_"))
def handle_verification_error(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
        moderator_id = cursor.fetchone()[0]
        cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
        conn.commit()
    
    bot.edit_message_text(f"‚ùå –ù–æ–º–µ—Ä {number} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ.", 
                         call.message.chat.id, 
                         call.message.message_id)

    for admin_id in config.ADMINS_ID:
        try:
            bot.send_message(admin_id, f"‚ùå –ö–æ–¥ –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ–º–µ—Ä {number} –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª—ë–Ω.")
        except:
            pass

    if moderator_id:
        markup_mod = types.InlineKeyboardMarkup()
        markup_mod.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
        markup_mod.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        try:
            bot.send_message(moderator_id, 
                           f"‚ùå –ù–æ–º–µ—Ä {number} –±—ã–ª —É–¥–∞–ª—ë–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ.", 
                           reply_markup=markup_mod)
        except:
            pass



       


@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_confirm_"))
def back_to_confirm(call):
    try:
        number = call.data.split("_")[3]
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER, VERIFICATION_CODE, TAKE_DATE, TG_NUMBER FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            
            if not result:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.send_message(
                    call.message.chat.id,
                    f"‚ùå –ù–æ–º–µ—Ä {number} –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä.",
                    reply_markup=markup
                )
                return
            
            owner_id, code, take_date, tg_number = result
            if not tg_number:
                tg_number = 1
            
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            if code and take_date != "0":
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚úÖ –î–∞, –≤—Å—Ç–∞–ª", callback_data=f"number_active_{number}_{tg_number}"),
                    types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"number_invalid_{number}_{tg_number}")
                )
                bot.send_message(
                    call.message.chat.id,
                    f"üì± <b>–¢–ì {tg_number}</b>\n"
                    f"üì± –ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É {number}\n–ö–æ–¥: {code}\n\n–í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?",
                    parse_mode='HTML',
                    reply_markup=markup
                )
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"send_code_{number}_{call.message.chat.id}_{tg_number}"),
                    types.InlineKeyboardButton("‚ùå –ù–æ–º–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"invalid_{number}")
                )
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.send_message(
                    call.message.chat.id,
                    f"üì± <b>–¢–ì {tg_number}</b>\n"
                    f"üì± –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>{number}</code>\n"
                    "–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
                    parse_mode='HTML',
                    reply_markup=markup
                )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ back_to_confirm: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é!")


@bot.callback_query_handler(func=lambda call: call.data == "toggle_afk")
def toggle_afk(call):
    user_id = call.from_user.id
    new_afk_status = db_module.toggle_afk_status(user_id)
    
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –ê–§–ö –Ω–∞ {'–≤–∫–ª—é—á—ë–Ω' if new_afk_status else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
    
    is_admin = user_id in config.ADMINS_ID
    is_moderator = db_module.is_moderator(user_id)
    
    if is_moderator and not is_admin:
        welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù\n" \
          "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ: (–≥—Ä—É–ø–ø–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω)\n\n" \
          "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n\n" \
          "1. –ë—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏\n\n" \
          "2. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –µ—Å–ª–∏ —Å –Ω–∏–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫\n" \
          "–ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —ç—Ç–∏–º –≤ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö!\n\n" \
          "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:\n" \
          "1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä\n" \
          "–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–≤–æ–¥–æ–º —Ç–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ ¬´—Ç–≥1¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –µ–≥–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç\n" \
          "–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ø–∏—Å–∞–Ω –≤–∞—à–µ–º—É –ü–ö\n" \
          "–í–∞–∂–Ω–æ! –ú—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –ü–ö, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ 70\n\n" \
          "2. –ï—Å–ª–∏ —Å –Ω–æ–º–µ—Ä–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç (—ç—Ç–æ –≤—Ä–µ–º—è, –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞) –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ ¬´—Å–ª–µ—Ç–µ–≤—à–∏–º¬ª\n" \
          "–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É: ¬´—Å–ª–µ—Ç –∏ –Ω–æ–º–µ—Ä —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏¬ª\n" \
          "–ü—Ä–∏–º–µ—Ä: —Å–ª–µ—Ç +79991112345\n" \
          "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä –æ—Ç–º–µ—Ç–∏—Ç—Å—è —Å–ª–µ—Ç–µ–≤—à–∏–º, –∏ –≤—ã–π–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª"
    else:
        welcome_text = (
            f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
            f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
            "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
            "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
            f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ {hold_time} –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
            f"<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
            f"‚ñ™Ô∏è <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ {hold_time} –º–∏–Ω—É—Ç)\n"
            f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME} ?</b>\n"
            f"‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
            f"‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
            f"‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
            f"<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
        )
    
    markup = types.InlineKeyboardMarkup()
    if not is_moderator or is_admin:
        markup.row(
            types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
        )
    if is_admin:
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
    if is_moderator:
        markup.add(
            types.InlineKeyboardButton("-", callback_data="-"),
        )
    afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not new_afk_status else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
    markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
    
    bot.edit_message_text(
        welcome_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML' if not is_moderator else None,
        reply_markup=markup
    )
    
    status_text = "–≤–∫–ª—é—á—ë–Ω" if new_afk_status else "–≤—ã–∫–ª—é—á–µ–Ω"
    bot.answer_callback_query(call.id, f"–†–µ–∂–∏–º –ê–§–ö {status_text}. –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ {'—Å–∫—Ä—ã—Ç—ã' if new_afk_status else '–≤–∏–¥–∏–º—ã'}.")




@bot.callback_query_handler(func=lambda call: call.data.startswith("number_invalid_"))
def number_invalid(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        number = parts[2]
        tg_number = int(parts[3])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º tg_number –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE numbers SET TG_NUMBER = ? WHERE NUMBER = ?', (tg_number, number))
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∑–∞–Ω–æ–≤–æ", callback_data=f"send_code_{number}_{call.message.chat.id}_{tg_number}"),
            types.InlineKeyboardButton("‚ùå –ù–µ –≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"mark_invalid_{number}")
        )
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_confirm_{number}"))
        
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        bot.send_message(
            call.message.chat.id,
            f"üì± <b>–¢–ì {tg_number}</b>\n"
            f"üì± –ù–æ–º–µ—Ä: {number}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup,
            parse_mode='HTML'
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ number_invalid: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")


def check_afk_status():
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, LAST_ACTIVITY, IS_AFK FROM users WHERE IS_AFK = 0')
        users = cursor.fetchall()

        for user in users:
            user_id, last_activity, is_afk = user
            is_moderator = db_module.is_moderator(user_id)
            is_admin = user_id in config.ADMINS_ID

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–Ω–µ –∞–¥–º–∏–Ω–æ–≤)
            if is_moderator and not is_admin:
                continue

            # –ï—Å–ª–∏ LAST_ACTIVITY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not last_activity:
                continue
        last_activity_time = datetime.strptime(last_activity, "%Y-%m-%d %H:%M:%S")
        if datetime.now() - last_activity_time > timedelta(minutes=10):
            cursor.execute('UPDATE users SET IS_AFK = 1 WHERE ID = ?', (user_id,))
            bot.send_message(user_id, "–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –ê–§–ö –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (10 –º–∏–Ω—É—Ç).\n"
                                    "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ê–§–ö, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ¬´/start¬ª –∏ –ø–æ–¥ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ê–§–ö.\n"
                                    "–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ, —Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç!")
        conn.commit()

with db_module.get_db() as conn:
    cursor = conn.cursor()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('UPDATE users SET LAST_ACTIVITY = ? WHERE LAST_ACTIVITY IS NULL', (current_time,))
    conn.commit()

afk_thread = threading.Thread(target=check_afk_status, daemon=True)
afk_thread.start()

def check_numbers_auto_confirm():
    with db.get_db() as conn:
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∏ —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        cursor.execute('SELECT HOLD_TIME, REWARD_AMOUNT FROM settings')
        result = cursor.fetchone()
        hold_time = result[0] if result else 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç
        reward_amount = result[1] if result else 2.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0 –µ–¥–∏–Ω–∏—Ü
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "in_progress" –∏–ª–∏ "–∞–∫—Ç–∏–≤–µ–Ω" –∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
        cursor.execute('''
            SELECT ID, NUMBER, TAKE_DATE, ID_OWNER, CONFIRMED_BY_MODERATOR_ID, STATUS, CONFIRM_DATE, VERIFICATION_CODE
            FROM numbers 
            WHERE STATUS IN ("in_progress", "–∞–∫—Ç–∏–≤–µ–Ω") OR VERIFICATION_CODE IS NOT NULL
        ''')
        numbers = cursor.fetchall()
        
        current_time = datetime.now()
        
        for number_data in numbers:
            number_id, number, take_date, owner_id, moderator_id, status, confirm_date, verification_code = number_data
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ TAKE_DATE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if take_date in ("0", "1"):
                continue
            
            try:
                start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                elapsed_time_since_take = (current_time - start_time).total_seconds() / 60  # –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∑—è—Ç–∏—è
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥, –Ω–æ –Ω–æ–º–µ—Ä –≤—Å—ë –µ—â—ë "in_progress" –∏ –ø—Ä–æ—à–ª–æ 5 –º–∏–Ω—É—Ç
                if verification_code and status == "in_progress" and elapsed_time_since_take >= 5:
                    confirm_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
                    cursor.execute('''
                        UPDATE numbers 
                        SET STATUS = "–∞–∫—Ç–∏–≤–µ–Ω", CONFIRM_DATE = ?, CONFIRMED_BY_MODERATOR_ID = ? 
                        WHERE ID = ?
                    ''', (confirm_time, moderator_id if moderator_id else 0, number_id))
                    conn.commit()
                    logging.debug(f"–ù–æ–º–µ—Ä {number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∫–∞–∫ '–∞–∫—Ç–∏–≤–µ–Ω', CONFIRM_DATE={confirm_time}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                    message = (
                        f"‚úÖ –ù–æ–º–µ—Ä {number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∫–∞–∫ –≤—Å—Ç–∞–≤—à–∏–π!\n"
                        f"üì± <code>{number}</code>\n"
                        f"üü¢ –í—Å—Ç–∞–ª: {confirm_time}\n"
                    )
                    try:
                        bot.send_message(owner_id, message, parse_mode='HTML')
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {e}")
                    if moderator_id:
                        try:
                            bot.send_message(moderator_id, message, parse_mode='HTML')
                        except Exception as e:
                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_id}: {e}")
                
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–∞–∫—Ç–∏–≤–µ–Ω" –∏ –ø—Ä–æ—à–ª–æ HOLD_TIME –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                elif status == "–∞–∫—Ç–∏–≤–µ–Ω":
                    if not confirm_date:
                        # –ï—Å–ª–∏ CONFIRM_DATE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ TAKE_DATE
                        confirm_date = take_date
                        cursor.execute('UPDATE numbers SET CONFIRM_DATE = ? WHERE ID = ?', (confirm_date, number_id))
                        conn.commit()
                    
                    confirm_time = datetime.strptime(confirm_date, "%Y-%m-%d %H:%M:%S")
                    elapsed_time_since_confirm = (current_time - confirm_time).total_seconds() / 60
                    
                    if elapsed_time_since_confirm >= hold_time:
                        shutdown_date = current_time.strftime("%Y-%m-%d %H:%M:%S")
                        cursor.execute('''
                            UPDATE numbers 
                            SET STATUS = "–æ—Ç—Å—Ç–æ—è–ª", SHUTDOWN_DATE = ? 
                            WHERE ID = ?
                        ''', (shutdown_date, number_id))
                        
                        # –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞
                        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (owner_id,))
                        user_balance = cursor.fetchone()
                        if user_balance:
                            new_balance = user_balance[0] + reward_amount
                            cursor.execute('UPDATE users SET BALANCE = ? WHERE ID = ?', (new_balance, owner_id))
                        else:
                            cursor.execute('INSERT INTO users (ID, BALANCE) VALUES (?, ?)', (owner_id, reward_amount))
                            new_balance = reward_amount
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞
                        cursor.execute('''
                            SELECT COUNT(*) 
                            FROM numbers 
                            WHERE ID_OWNER = ? AND STATUS = "–æ—Ç—Å—Ç–æ—è–ª"
                        ''', (owner_id,))
                        successful_numbers = cursor.fetchone()[0]
                        
                        conn.commit()
                        logging.debug(f"–ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç—Å—Ç–æ—è–≤—à–∏–π, –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}")
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                        message = (
                            f"‚úÖ –ù–æ–º–µ—Ä {number} –æ—Ç—Å—Ç–æ—è–ª {hold_time} –º–∏–Ω—É—Ç!\n"
                            f"üì± <code>{number}</code>\n"
                            f"üü¢ –í—Å—Ç–∞–ª: {confirm_date}\n"
                            f"üü¢ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date}\n"
                            f"üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reward_amount} $. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}\n"
                            f"üìà –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {successful_numbers}\n"
                        )
                        try:
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                            bot.send_message(owner_id, message, parse_mode='HTML', reply_markup=markup)
                        except Exception as e:
                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {e}")
            
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                continue

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
schedule.every(5).minutes.do(check_numbers_auto_confirm)

def run_auto_confirm_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
auto_confirm_thread = threading.Thread(target=run_auto_confirm_scheduler, daemon=True)
auto_confirm_thread.start()

def init_db():
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(numbers)")
        columns = [col[1] for col in cursor.fetchall()]
        
        # –î–æ–±–∞–≤–ª—è–µ–º GROUP_CHAT_ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'GROUP_CHAT_ID' not in columns:
            try:
                cursor.execute("ALTER TABLE numbers ADD COLUMN GROUP_CHAT_ID INTEGER")
                conn.commit()
                print("–°—Ç–æ–ª–±–µ—Ü GROUP_CHAT_ID —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            except sqlite3.OperationalError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü GROUP_CHAT_ID: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º TG_NUMBER –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'TG_NUMBER' not in columns:
            try:
                cursor.execute("ALTER TABLE numbers ADD COLUMN TG_NUMBER INTEGER")
                conn.commit()
                print("–°—Ç–æ–ª–±–µ—Ü TG_NUMBER —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            except sqlite3.OperationalError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü TG_NUMBER: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º STATUS –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'STATUS' not in columns:
            try:
                cursor.execute("ALTER TABLE numbers ADD COLUMN STATUS TEXT DEFAULT 'queued'")
                conn.commit()
                print("–°—Ç–æ–ª–±–µ—Ü STATUS —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            except sqlite3.OperationalError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü STATUS: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º VERIFICATION_CODE –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'VERIFICATION_CODE' not in columns:
            try:
                cursor.execute("ALTER TABLE numbers ADD COLUMN VERIFICATION_CODE TEXT")
                conn.commit()
                print("–°—Ç–æ–ª–±–µ—Ü VERIFICATION_CODE —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            except sqlite3.OperationalError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü VERIFICATION_CODE: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º CONFIRM_DATE –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'CONFIRM_DATE' not in columns:
            try:
                cursor.execute("ALTER TABLE numbers ADD COLUMN CONFIRM_DATE TEXT")
                conn.commit()
                print("–°—Ç–æ–ª–±–µ—Ü CONFIRM_DATE —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            except sqlite3.OperationalError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü CONFIRM_DATE: {e}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º STATUS = 'queued' –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤, –≥–¥–µ STATUS IS NULL
        cursor.execute("UPDATE numbers SET STATUS = 'queued' WHERE STATUS IS NULL")
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É settings –∏ –¥–æ–±–∞–≤–ª—è–µ–º REWARD_AMOUNT
        cursor.execute("PRAGMA table_info(settings)")
        settings_columns = [col[1] for col in cursor.fetchall()]
        if 'REWARD_AMOUNT' not in settings_columns:
            try:
                cursor.execute("ALTER TABLE settings ADD COLUMN REWARD_AMOUNT REAL")
                cursor.execute("UPDATE settings SET REWARD_AMOUNT = 2.0 WHERE REWARD_AMOUNT IS NULL")
                conn.commit()
                print("–°—Ç–æ–ª–±–µ—Ü REWARD_AMOUNT —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É settings —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0.")
            except sqlite3.OperationalError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü REWARD_AMOUNT: {e}")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                ID INTEGER PRIMARY KEY,
                BALANCE REAL DEFAULT 0,
                REG_DATE TEXT,
                IS_AFK INTEGER DEFAULT 0,
                LAST_ACTIVITY TEXT
            )
        ''')
        conn.commit()

if __name__ == "__main__":
    init_db()
    timeout_thread = threading.Thread(target=check_number_timeout, daemon=True)
    timeout_thread.start()
    afk_thread = threading.Thread(target=check_afk_status, daemon=True)
    afk_thread.start()
    clear_db_thread = threading.Thread(target=schedule_clear_numbers, daemon=True)
    clear_db_thread.start()
    auto_confirm_thread = threading.Thread(target=run_auto_confirm_scheduler, daemon=True)
    auto_confirm_thread.start()
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        sleep(10)
        bot.infinity_polling()